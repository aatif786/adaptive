{
    "name": "My workflow 3",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "adaptive-instructor",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "d5b7f8eb-f41b-45d6-b8ac-7c7b66e8e230",
        "name": "Main Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1.1,
        "position": [
          -2680,
          220
        ],
        "webhookId": "9ef00e80-0d3e-4fcb-b8ff-e621ee6fc02e"
      },
      {
        "parameters": {
          "jsCode": "// Session State Manager - Handles all session state logic\nconst sessionId = $json.sessionId || 'default-session';\nconst action = $json.action || 'start';\nconst learnerInput = $json.learnerInput || {};\n\n// Initialize or retrieve session state\nlet sessionState = $getWorkflowStaticData('global');\nif (!sessionState.sessions) {\n  sessionState.sessions = {};\n}\n\nif (!sessionState.sessions[sessionId] || action === 'start') {\n  // Initialize new session\n  sessionState.sessions[sessionId] = {\n    currentConceptIndex: 0,\n    completedConcepts: [],\n    remainingCoreConcepts: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    insertedConcepts: [],\n    interactionHistory: [],\n    currentConcept: null,\n    lastToolUsed: null,\n    currentConceptTools: [],\n    lastAssessmentScore: null,\n    knowledgeGaps: [],\n    recentQuestions: []\n  };\n}\n\nconst session = sessionState.sessions[sessionId];\n\n// Process learner input based on last tool used\nif (learnerInput && session.lastToolUsed) {\n  session.interactionHistory.push({\n    concept: session.currentConcept?.title,\n    tool: session.lastToolUsed,\n    input: learnerInput,\n    timestamp: new Date().toISOString()\n  });\n  \n  // Track recent questions\n  if (learnerInput.note) {\n    session.recentQuestions.push(learnerInput.note);\n    if (session.recentQuestions.length > 5) {\n      session.recentQuestions.shift();\n    }\n  }\n}\n\n// Get course data\nconst courseTopic = $json.courseTopic;\nconst learnerProfile = $json.learnerProfile;\nconst coreConcepts = $json.coreConcepts;\n\n// Determine current concept\nif (!session.currentConcept || action === 'next_concept') {\n  let nextConcept;\n  \n  if (session.insertedConcepts.length > 0) {\n    // Process inserted concepts first\n    nextConcept = session.insertedConcepts.shift();\n  } else if (session.remainingCoreConcepts.length > 0) {\n    // Get next core concept\n    const nextId = session.remainingCoreConcepts[0];\n    nextConcept = coreConcepts.find(c => c.id === nextId);\n  } else {\n    // Course complete\n    nextConcept = null;\n  }\n  \n  if (nextConcept) {\n    session.currentConcept = nextConcept;\n    session.currentConceptTools = [];\n  }\n}\n\n// Save session state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nreturn {\n  sessionId,\n  action,\n  learnerInput,\n  sessionState: session,\n  courseTopic,\n  learnerProfile,\n  coreConcepts,\n  currentConcept: session.currentConcept,\n  courseComplete: !session.currentConcept && \n                  session.remainingCoreConcepts.length === 0 && \n                  session.insertedConcepts.length === 0\n};"
        },
        "id": "06740e82-059e-4e50-a5db-c6e6be5f92c2",
        "name": "Session State Manager",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2240,
          120
        ]
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.courseComplete }}",
                      "rightValue": "={{ true }}",
                      "operator": {
                        "type": "boolean",
                        "operation": "true"
                      },
                      "id": "cond1"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "courseComplete"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.action }}",
                      "rightValue": "start",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "cond2"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "startCourse"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.currentConcept }}",
                      "rightValue": "",
                      "operator": {
                        "type": "object",
                        "operation": "notEmpty",
                        "singleValue": true
                      },
                      "id": "cond3"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "continueLesson"
              }
            ]
          },
          "options": {}
        },
        "id": "bc5e2d5e-47ca-467f-9bc0-e72c927c414f",
        "name": "Route by State",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -2020,
          120
        ]
      },
      {
        "parameters": {
          "jsCode": "// Course Completion Handler\nconst sessionId = $json.sessionId;\nconst session = $json.sessionState;\n\n// Calculate final statistics\nconst totalConcepts = session.completedConcepts.length;\nconst coreConceptsCompleted = session.completedConcepts.filter(id => \n  typeof id === 'number'\n).length;\nconst dynamicConceptsCompleted = totalConcepts - coreConceptsCompleted;\n\n// Prepare completion response\nconst responseData = {\n  sessionId,\n  toolType: 'course_complete',\n  courseComplete: true,\n  toolData: {\n    title: 'Congratulations! Course Complete',\n    summary: `You've successfully completed all ${totalConcepts} concepts in the course.`,\n    statistics: {\n      coreConceptsCompleted,\n      dynamicConceptsAdded: dynamicConceptsCompleted,\n      totalInteractions: session.interactionHistory.length\n    },\n    message: 'Great job completing the AI Native Product Manager course!'\n  },\n  waitingForInput: false\n};\n\nreturn {\n  responseData\n};"
        },
        "id": "13b1346f-b14a-439e-bf4c-36ffabd5e321",
        "name": "Course Completion",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          400,
          -80
        ]
      },
      {
        "parameters": {
          "jsCode": "// Welcome Message for Course Start\nconst sessionId = $json.sessionId;\nconst courseTopic = $json.courseTopic;\n\nconst responseData = {\n  sessionId,\n  toolType: 'welcome',\n  toolData: {\n    title: `Welcome to: ${courseTopic}`,\n    message: 'This adaptive course will guide you through 10 core concepts with personalized instruction based on your progress.',\n    instructions: 'Click Next to begin with the first concept.'\n  },\n  waitingForInput: false,\n  nextAction: 'start_course'\n};\n\nreturn {\n  ...($json),\n  responseData\n};"
        },
        "id": "ded4f38c-0dee-42bb-983f-d4e364594250",
        "name": "Welcome Message",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          400,
          120
        ]
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.nextTool }}",
                      "rightValue": "concept_card",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "tool1"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "conceptCard"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.nextTool }}",
                      "rightValue": "assessment",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "tool2"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "assessment"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.nextTool }}",
                      "rightValue": "prompt_exercise",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "tool3"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "promptExercise"
              }
            ]
          },
          "options": {}
        },
        "id": "006e5da5-24dd-4da0-b737-da0ef3f828a6",
        "name": "Tool Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -780,
          560
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Concept Card Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerNote = $json.learnerInput?.note;\n\n// Update session state\nconst session = $json.sessionState;\nif (!session.currentConceptTools.includes('concept_card')) {\n  session.currentConceptTools.push('concept_card');\n}\nsession.lastToolUsed = 'concept_card';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'concept_card',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    title: concept.title,\n    summary: concept.summary,\n    expertTips: concept.expertTips,\n    canSubmitNote: true\n  },\n  waitingForInput: !learnerNote,\n  inputType: 'note',\n  message: 'Read through the concept and feel free to add any notes or questions.'\n};\n\n// If we have a note, we need to generate a smart reply\nif (learnerNote) {\n  return {\n    ...($json),\n    needsSmartReply: true,\n    learnerNote,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsSmartReply: false,\n  responseData\n};"
        },
        "id": "57414dff-b195-4e12-aeca-cc6bdd9d34bb",
        "name": "Concept Card Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -420,
          340
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 1
            },
            "conditions": [
              {
                "leftValue": "={{ $json.needsSmartReply }}",
                "rightValue": "={{ true }}",
                "operator": {
                  "type": "boolean",
                  "operation": "true"
                },
                "id": "needreply"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "9fbe3aeb-2caf-4cac-9ffd-c64037ff2376",
        "name": "Need Smart Reply?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.1,
        "position": [
          -160,
          300
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gpt-4o"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are a helpful AI instructor providing brief, encouraging responses to learner comments. Keep responses under 3 sentences and personalized to their role.\"}, {\"role\": \"user\", \"content\": \"The learner submitted this comment while learning about '{{ $json.currentConcept.title }}':\\n'{{ $json.learnerNote }}'\\n\\nGenerate a brief, encouraging response that acknowledges their input, provides clarification if needed, and maintains engagement. The learner is a {{ $json.learnerProfile.role }}.\\n\\nRespond in plain text, not JSON.\"}]"
              },
              {
                "name": "temperature",
                "value": "0.7"
              },
              {
                "name": "max_tokens",
                "value": "150"
              }
            ]
          },
          "options": {}
        },
        "id": "922cad13-db61-4f78-8605-3c56f111bcb9",
        "name": "Generate Smart Reply",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          180,
          320
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Add Smart Reply to Response\nconst smartReply = $json.choices[0].message.content;\nconst responseData = $node[\"Concept Card Handler\"].json.responseData;\n\n// Add smart reply to response\nresponseData.toolData.smartReply = smartReply;\nresponseData.waitingForInput = false;\nresponseData.nextAction = 'Click Next to continue to the assessment';\n\nreturn {\n  ...($node[\"Concept Card Handler\"].json),\n  responseData\n};"
        },
        "id": "0ec273eb-9d74-4bdf-b41d-546799e9c48f",
        "name": "Add Smart Reply",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          400,
          320
        ]
      },
      {
        "parameters": {
          "jsCode": "// Assessment Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerAnswer = $json.learnerInput?.answer;\nconst session = $json.sessionState;\n\n// Update session state\nif (!session.currentConceptTools.includes('assessment')) {\n  session.currentConceptTools.push('assessment');\n}\nsession.lastToolUsed = 'assessment';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'assessment',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    question: concept.assessmentQuestion,\n    conceptTitle: concept.title\n  },\n  waitingForInput: !learnerAnswer,\n  inputType: 'answer',\n  message: 'Answer the question to check your understanding.'\n};\n\n// If we have an answer, we need to grade it\nif (learnerAnswer) {\n  return {\n    ...($json),\n    needsGrading: true,\n    learnerAnswer,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsGrading: false,\n  responseData\n};"
        },
        "id": "bcb931f9-32f2-44c0-9e37-6633a2df9793",
        "name": "Assessment Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -560,
          560
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "={{ $json.needsGrading }}",
                "rightValue": "={{ true }}",
                "operator": {
                  "type": "boolean",
                  "operation": "true"
                },
                "id": "needgrade"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "79acb1c4-5e70-4176-b71c-805f68062037",
        "name": "Need Grading?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.1,
        "position": [
          -260,
          580
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gpt-4o"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are an expert instructional coach evaluating a learner's understanding. Return your evaluation as a JSON object.\"}, {\"role\": \"user\", \"content\": \"Context:\\n- Course Topic: {{ $json.courseTopic }}\\n- Current Concept: {{ $json.currentConcept.title }}\\n- Question: {{ $json.currentConcept.assessmentQuestion }}\\n- Correct Answer: {{ $json.currentConcept.correctAnswer }}\\n- Learner's Answer: {{ $json.learnerAnswer }}\\n- Learner Profile: {{ $json.learnerProfile.role }} at {{ $json.learnerProfile.company }}\\n\\nEvaluate the answer and return a JSON object with this exact structure:\\n{\\n  \\\"score\\\": (0-5 number),\\n  \\\"feedback\\\": \\\"Brief, encouraging feedback\\\",\\n  \\\"understood\\\": (true or false),\\n  \\\"knowledgeGaps\\\": [\\\"specific areas of confusion if any\\\"]\\n}\"}]"
              },
              {
                "name": "temperature",
                "value": "0.3"
              },
              {
                "name": "max_tokens",
                "value": "200"
              },
              {
                "name": "response_format",
                "value": "={{ {\"type\": \"json_object\"} }}"
              }
            ]
          },
          "options": {}
        },
        "id": "02d57bf3-2a84-446a-8177-2b1e08ad985c",
        "name": "Grade Assessment",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          60,
          700
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process Grading Result\nconst gradingResult = JSON.parse($json.choices[0].message.content);\nconst responseData = $node[\"Assessment Handler\"].json.responseData;\nconst sessionId = $node[\"Assessment Handler\"].json.sessionId;\n\n// Update session with assessment results\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\nsession.lastAssessmentScore = gradingResult.score;\nsession.knowledgeGaps = gradingResult.knowledgeGaps || [];\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Add grading to response\nresponseData.toolData.gradingResult = gradingResult;\nresponseData.waitingForInput = false;\nresponseData.nextAction = gradingResult.score >= 4 ? \n  'Great job! Click Next to continue.' : \n  'Click Next to continue. We\\'ll address any gaps.';\n\nreturn {\n  ...($node[\"Assessment Handler\"].json),\n  gradingResult,\n  responseData\n};"
        },
        "id": "d9f1c4a6-5d48-43b2-93c9-b5c689d4ae2a",
        "name": "Process Grading",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          400,
          720
        ]
      },
      {
        "parameters": {
          "jsCode": "// Prompt Exercise Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerPrompt = $json.learnerInput?.prompt;\nconst session = $json.sessionState;\n\n// Update session state\nif (!session.currentConceptTools.includes('prompt_exercise')) {\n  session.currentConceptTools.push('prompt_exercise');\n}\nsession.lastToolUsed = 'prompt_exercise';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'prompt_exercise',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    task: concept.promptTask,\n    conceptTitle: concept.title\n  },\n  waitingForInput: !learnerPrompt,\n  inputType: 'prompt',\n  message: 'Practice your prompt engineering skills with this task.'\n};\n\n// If we have a prompt, we need to evaluate it\nif (learnerPrompt) {\n  return {\n    ...($json),\n    needsEvaluation: true,\n    learnerPrompt,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsEvaluation: false,\n  responseData\n};"
        },
        "id": "449e0002-de9c-4d2f-b956-d78043e355dc",
        "name": "Prompt Exercise Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -260,
          945
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "={{ $json.needsEvaluation }}",
                "rightValue": "={{ true }}",
                "operator": {
                  "type": "boolean",
                  "operation": "true"
                },
                "id": "needeval"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "b2fc7820-f23a-4930-87e0-6fa1bc39f50b",
        "name": "Need Evaluation?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.1,
        "position": [
          -40,
          945
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gpt-4o"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are an expert at evaluating AI prompts for product management tasks. Return your evaluation as a JSON object.\"}, {\"role\": \"user\", \"content\": \"Task: {{ $json.currentConcept.promptTask }}\\nLearner's Prompt: {{ $json.learnerPrompt }}\\nLearner Background: {{ $json.learnerProfile.role }} with skills in {{ $json.learnerProfile.skills.join(', ') }}\\n\\nEvaluate the prompt and return a JSON object with this exact structure:\\n{\\n  \\\"score\\\": (0-5 number),\\n  \\\"feedback\\\": \\\"Constructive feedback\\\",\\n  \\\"strengths\\\": [\\\"what they did well\\\"],\\n  \\\"improvements\\\": [\\\"specific suggestions\\\"],\\n  \\\"simulatedAIResponse\\\": \\\"What an AI would generate from this prompt\\\"\\n}\"}]"
              },
              {
                "name": "temperature",
                "value": "0.7"
              },
              {
                "name": "max_tokens",
                "value": "300"
              },
              {
                "name": "response_format",
                "value": "={{ {\"type\": \"json_object\"} }}"
              }
            ]
          },
          "options": {}
        },
        "id": "bd3110e7-cb54-444c-8431-812bd3ae4caa",
        "name": "Evaluate Prompt",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          180,
          1020
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process Prompt Evaluation\nconst evaluationResult = JSON.parse($json.choices[0].message.content);\nconst responseData = $node[\"Prompt Exercise Handler\"].json.responseData;\n\n// Add evaluation to response\nresponseData.toolData.evaluationResult = evaluationResult;\nresponseData.waitingForInput = false;\nresponseData.nextAction = 'Click Next to continue to the next concept.';\n\nreturn {\n  ...($node[\"Prompt Exercise Handler\"].json),\n  evaluationResult,\n  responseData\n};"
        },
        "id": "36e7f9f7-1fd0-498a-9f29-ef2f7bd513be",
        "name": "Process Evaluation",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          400,
          1020
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gpt-4o"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"Generate a new mini-concept to address a specific learning gap. Create focused content that directly addresses the confusion.\"}, {\"role\": \"user\", \"content\": \"Context:\\n- Main Topic: {{ $json.courseTopic }}\\n- Current Concept: {{ $json.currentConcept.title }}\\n- Knowledge Gap: {{ $json.orchestratorDecision.conceptNeeded.reason }}\\n- Learner Profile: {{ $json.learnerProfile.role }} at {{ $json.learnerProfile.company }}\\n\\nCreate a focused concept that directly addresses the confusion and builds a bridge to understanding. Return JSON:\\n{\\n  \\\"title\\\": \\\"Clear, specific title\\\",\\n  \\\"summary\\\": \\\"2-3 sentence overview\\\",\\n  \\\"expertTips\\\": [\\\"2-3 practical tips\\\"],\\n  \\\"assessmentQuestion\\\": \\\"Targeted question to verify understanding\\\",\\n  \\\"correctAnswer\\\": \\\"Brief correct answer\\\",\\n  \\\"promptTask\\\": \\\"Optional - only if relevant to the gap\\\"\\n}\"}]"
              },
              {
                "name": "temperature",
                "value": "0.7"
              },
              {
                "name": "max_tokens",
                "value": "400"
              },
              {
                "name": "response_format",
                "value": "={{ {\"type\": \"json_object\"} }}"
              }
            ]
          },
          "options": {}
        },
        "id": "f177ff98-5be5-47fb-b2e5-59736f4829a0",
        "name": "Generate New Concept",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -1420,
          1040
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Insert New Concept and Set as Current\nconst newConcept = JSON.parse($json.choices[0].message.content);\nconst sessionId = $node[\"Process Orchestrator Decision\"].json.sessionId;\n\n// Add metadata to new concept\nnewConcept.id = `dynamic_${Date.now()}`;\nnewConcept.isCore = false;\nnewConcept.isDynamic = true;\n\n// Get session and set new concept as current\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\nsession.currentConcept = newConcept;\nsession.currentConceptTools = [];\nsession.lastToolUsed = null;\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Route directly to concept card with the new concept\nreturn {\n  ...($node[\"Process Orchestrator Decision\"].json),\n  currentConcept: newConcept,\n  nextTool: 'concept_card',\n  newConceptInserted: true\n};"
        },
        "id": "1c1a1c8f-a54a-4d60-8621-497f34f73406",
        "name": "Insert Concept",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -1100,
          1040
        ]
      },
      {
        "parameters": {
          "jsCode": "// Complete Current Concept and Move to Next\nconst sessionId = $json.sessionId;\nconst currentConcept = $json.currentConcept;\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Mark current concept as completed\nif (currentConcept) {\n  session.completedConcepts.push(currentConcept.id);\n  \n  // Remove from remaining if it was a core concept\n  if (currentConcept.isCore) {\n    session.remainingCoreConcepts = session.remainingCoreConcepts.filter(\n      id => id !== currentConcept.id\n    );\n  }\n}\n\n// Reset for next concept\nsession.currentConcept = null;\nsession.currentConceptTools = [];\nsession.lastToolUsed = null;\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Prepare response to move to next concept\nconst responseData = {\n  sessionId,\n  toolType: 'transition',\n  conceptProgress: {\n    current: session.completedConcepts.length,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    completedConcept: currentConcept?.title,\n    message: 'Moving to next concept...'\n  },\n  waitingForInput: false,\n  nextAction: 'auto_continue'\n};\n\nreturn {\n  ...($json),\n  responseData,\n  moveToNext: true\n};"
        },
        "id": "f8d9c490-76af-4eeb-bac5-aac3c41e0767",
        "name": "Complete Concept",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          400,
          1220
        ]
      },
      {
        "parameters": {
          "numberInputs": 10
        },
        "id": "91096db0-02d5-4a4b-9d46-99fe5bcb8b09",
        "name": "Merge Responses",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3,
        "position": [
          620,
          423
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "7b92547c-6d41-4021-bff3-0464ef761094",
        "name": "Webhook Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.1,
        "position": [
          1060,
          570
        ]
      },
      {
        "parameters": {
          "path": "reset-session",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "5a35aa51-a3d4-44b7-a683-1b6de7b4ec52",
        "name": "Reset Session Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1.1,
        "position": [
          -2900,
          1480
        ],
        "webhookId": "594653ea-5a3e-4e99-9a1d-c2ecdf0f5c56"
      },
      {
        "parameters": {
          "jsCode": "// Reset Session\nconst sessionId = $json.query?.sessionId || 'default-session';\n\n// Clear session data\nconst sessionState = $getWorkflowStaticData('global');\nif (sessionState.sessions && sessionState.sessions[sessionId]) {\n  delete sessionState.sessions[sessionId];\n}\n\nreturn {\n  success: true,\n  message: `Session ${sessionId} has been reset`,\n  sessionId\n};"
        },
        "id": "0a4175df-e6ff-453f-ac5c-5629198725ff",
        "name": "Reset Session",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2680,
          1480
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "5f2f3ef9-80bf-4514-9c90-3fb6086d33cd",
        "name": "Reset Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.1,
        "position": [
          -2460,
          1480
        ]
      },
      {
        "parameters": {
          "jsCode": "// Extract webhook data from the first item in the array\nconst webhookData = $input.first().json.body;\n\n// Add course data\nreturn {\n  sessionId: webhookData.sessionId,\n  userName: webhookData.userName,\n  action: webhookData.action,\n  learnerInput: webhookData.learnerInput,\n  courseTopic: \"How to Become an AI Native Product Manager\",\n  learnerProfile: {\n    role: \"Product Manager\",\n    company: \"TechCorp\",\n    skills: [\"Agile\", \"User Research\", \"Basic Python\"]\n  },\n  coreConcepts: [\n    {\n      \"id\": 1,\n      \"title\": \"Understanding AI Capabilities\",\n      \"summary\": \"Learn what AI can and cannot do in product management\",\n      \"expertTips\": [\"Focus on problem-solving, not just technology\", \"Start with user needs\"],\n      \"assessmentQuestion\": \"What is the primary consideration when integrating AI into a product?\",\n      \"correctAnswer\": \"User value and problem-solution fit\",\n      \"promptTask\": \"Write a prompt to help identify user pain points for a fitness app\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 2,\n      \"title\": \"AI-First Product Strategy\",\n      \"summary\": \"Develop strategies that leverage AI as a core differentiator\",\n      \"expertTips\": [\"Think beyond automation\", \"Consider AI as a team member\"],\n      \"assessmentQuestion\": \"How does AI-first differ from AI-enabled products?\",\n      \"correctAnswer\": \"AI-first products have AI at their core value proposition, not just as an enhancement\",\n      \"promptTask\": \"Create a prompt to brainstorm AI-first features for an e-commerce platform\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 3,\n      \"title\": \"Prompt Engineering for PMs\",\n      \"summary\": \"Master the art of writing effective prompts for product tasks\",\n      \"expertTips\": [\"Be specific and contextual\", \"Iterate based on outputs\"],\n      \"assessmentQuestion\": \"What makes a product management prompt effective?\",\n      \"correctAnswer\": \"Clear context, specific goals, and measurable outcomes\",\n      \"promptTask\": \"Write a prompt to generate user stories for a new feature\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 4,\n      \"title\": \"AI Ethics in Product Design\",\n      \"summary\": \"Navigate ethical considerations when building AI products\",\n      \"expertTips\": [\"Consider bias in data and algorithms\", \"Prioritize transparency\"],\n      \"assessmentQuestion\": \"What is the most important ethical consideration for AI products?\",\n      \"correctAnswer\": \"Ensuring fairness and preventing harm to users\",\n      \"promptTask\": \"Draft a prompt to identify potential ethical issues in a healthcare AI product\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 5,\n      \"title\": \"Measuring AI Product Success\",\n      \"summary\": \"Define and track metrics for AI-powered features\",\n      \"expertTips\": [\"Balance accuracy with user satisfaction\", \"Track both technical and business metrics\"],\n      \"assessmentQuestion\": \"Beyond accuracy, what metric is crucial for AI products?\",\n      \"correctAnswer\": \"User trust and adoption rate\",\n      \"promptTask\": \"Create a prompt to generate a metrics dashboard for an AI feature\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 6,\n      \"title\": \"Cross-functional AI Collaboration\",\n      \"summary\": \"Work effectively with data scientists and ML engineers\",\n      \"expertTips\": [\"Learn the language of AI teams\", \"Focus on outcomes, not algorithms\"],\n      \"assessmentQuestion\": \"What's the PM's primary role in AI development?\",\n      \"correctAnswer\": \"Translating user needs into technical requirements and ensuring alignment\",\n      \"promptTask\": \"Write a prompt to create a collaboration plan between PM and AI teams\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 7,\n      \"title\": \"AI Product Roadmapping\",\n      \"summary\": \"Plan and prioritize AI features in your roadmap\",\n      \"expertTips\": [\"Account for uncertainty in AI development\", \"Build in experimentation time\"],\n      \"assessmentQuestion\": \"How does AI impact traditional roadmapping?\",\n      \"correctAnswer\": \"Requires more flexibility and iterative approaches due to uncertainty\",\n      \"promptTask\": \"Generate a prompt for creating an AI feature prioritization matrix\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 8,\n      \"title\": \"User Research for AI Products\",\n      \"summary\": \"Conduct research to understand AI product needs\",\n      \"expertTips\": [\"Test AI interactions early\", \"Understand user mental models of AI\"],\n      \"assessmentQuestion\": \"What's unique about user research for AI products?\",\n      \"correctAnswer\": \"Need to understand user expectations and trust in AI systems\",\n      \"promptTask\": \"Create a prompt for designing an AI product user interview guide\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 9,\n      \"title\": \"AI Product Launch Strategies\",\n      \"summary\": \"Successfully launch and iterate on AI features\",\n      \"expertTips\": [\"Start with beta users\", \"Communicate limitations clearly\"],\n      \"assessmentQuestion\": \"What's critical for AI product launches?\",\n      \"correctAnswer\": \"Setting proper expectations and having a feedback loop for improvements\",\n      \"promptTask\": \"Write a prompt to create an AI feature launch checklist\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 10,\n      \"title\": \"Future of AI in Product Management\",\n      \"summary\": \"Prepare for emerging AI trends and technologies\",\n      \"expertTips\": [\"Stay curious about new AI capabilities\", \"Think about AI as augmentation\"],\n      \"assessmentQuestion\": \"How will AI change the PM role itself?\",\n      \"correctAnswer\": \"AI will augment PM capabilities, enabling data-driven decisions at scale\",\n      \"promptTask\": \"Generate a prompt to explore future AI use cases in your industry\",\n      \"isCore\": true\n    }\n  ]\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2460,
          120
        ],
        "id": "43e934b7-0e53-46fd-98e4-2e75e33bb83d",
        "name": "Init Course Data"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Extract Response Data\nconst responseData = $json.responseData;\n\nif (!responseData) {\n  throw new Error('No responseData found in input');\n}\n\nreturn responseData;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          840,
          570
        ],
        "id": "e5a45044-14f9-47eb-bcfc-729d4ecea042",
        "name": "Limit Data"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "7d73fcfb-a28a-4e7a-973b-b888753d9a91",
        "name": "Orchestrator AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -2020,
          800
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -2900,
          20
        ],
        "id": "c9f56034-5b3b-4de7-a531-1feed539b93c",
        "name": "When clicking 'Test workflow'"
      },
      {
        "parameters": {
          "mode": "raw",
          "jsonOutput": "{\n  \"body\": {\n    \"sessionId\": \"manual_session\",\n    \"userName\": \"Mohammed Ali\",\n    \"action\": \"next\",\n    \"learnerInput\": {}\n  }\n}",
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -2680,
          20
        ],
        "id": "2d2feebf-7192-4a1a-ab29-7d02195e23cf",
        "name": "Edit Fields"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Prepare Orchestrator OpenAI request\nconst messages = [\n  {\n    role: \"system\",\n    content: \"You are an adaptive learning orchestrator. Analyze the current learning state and decide the next best action for the learner.\"\n  },\n  {\n    role: \"user\", \n    content: `Current Learning State:\n- Course Topic: ${$json.courseTopic}\n- Current Concept: ${$json.currentConcept?.title || 'None'}\n- Tools Already Used: ${$json.sessionState.currentConceptTools.join(', ') || 'None'}\n- Last Assessment Score: ${$json.sessionState.lastAssessmentScore || 'N/A'}/5\n- Knowledge Gaps: ${$json.sessionState.knowledgeGaps?.join(', ') || 'None'}\n- Recent Questions: ${$json.sessionState.recentQuestions?.join('; ') || 'None'}\n- Completed Concepts: ${$json.sessionState.completedConcepts.length}\n- Remaining Core Concepts: ${$json.sessionState.remainingCoreConcepts.length}\n\nRules:\n1. Always start new concepts with concept_card\n2. Follow concept_card with assessment\n3. Only use prompt_exercise if assessment score >= 4 and a prompt task exists\n4. If assessment score < 3 or significant gaps exist, consider inserting a clarifying concept\n5. Move to next_concept when all tools for current concept are complete\n\nReturn JSON:\n{\n  \"nextTool\": \"concept_card|assessment|prompt_exercise|next_concept\",\n  \"reasoning\": \"Brief explanation of decision\",\n  \"shouldInsertConcept\": true/false,\n  \"conceptNeeded\": {\n    \"reason\": \"specific gap to address if inserting\",\n    \"focus\": \"topic area for new concept\"\n  }\n}`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.3,\n  max_tokens: 200,\n  response_format: { type: \"json_object\" },\n  // Pass through original data\n  originalData: $json\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2240,
          800
        ],
        "id": "050f622c-edbb-40c1-9bf5-9dd1c20c613e",
        "name": "Orchestrator Prompt"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Process Orchestrator Decision\nconst orchestratorDecision = JSON.parse($json.choices[0].message.content);\nconst originalData = $node[\"Orchestrator Prompt\"].json.originalData;\n\nreturn {\n  ...originalData,\n  orchestratorDecision,\n  nextTool: orchestratorDecision.nextTool,\n  needsNewConcept: orchestratorDecision.shouldInsertConcept\n};"
        },
        "id": "8fa14885-6cc2-4531-828b-74510c64e508",
        "name": "Process Orchestrator Decision",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -1800,
          800
        ]
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ ['concept_card', 'assessment', 'prompt_exercise'].includes($json.nextTool) }}",
                      "rightValue": "={{ true }}",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "id": "252d4b84-cc5a-482b-b966-c78ad46410f5"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "routeToTool"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c41e007c-c9f8-4e01-9c3b-f5416eaa4575",
                      "leftValue": "={{ $json.nextTool }}",
                      "rightValue": "=next_concept",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "completeConcept"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6131214d-57dc-4724-a4ee-daa86b8687ff",
                      "leftValue": "={{ $json.needsNewConcept }}",
                      "rightValue": "={{ true }}",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "insertNewConcept"
              }
            ]
          },
          "options": {}
        },
        "id": "467fe0b5-bc6e-45f8-ba43-736b09501b6d",
        "name": "Check Next Action",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -1580,
          800
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "680d575f-a6ec-4c85-9c5a-545d5854ef81",
        "name": "Grade Assessment AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          220,
          540
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Prepare Orchestrator OpenAI request\nconst messages = [\n  {\n    role: \"system\",\n    content: \"You are an adaptive learning orchestrator. Analyze the current learning state and decide the next best action for the learner.\"\n  },\n  {\n    role: \"user\", \n    content: `Current Learning State:\n- Course Topic: ${$json.courseTopic}\n- Current Concept: ${$json.currentConcept?.title || 'None'}\n- Tools Already Used: ${$json.sessionState.currentConceptTools.join(', ') || 'None'}\n- Last Assessment Score: ${$json.sessionState.lastAssessmentScore || 'N/A'}/5\n- Knowledge Gaps: ${$json.sessionState.knowledgeGaps?.join(', ') || 'None'}\n- Recent Questions: ${$json.sessionState.recentQuestions?.join('; ') || 'None'}\n- Completed Concepts: ${$json.sessionState.completedConcepts.length}\n- Remaining Core Concepts: ${$json.sessionState.remainingCoreConcepts.length}\n\nRules:\n1. Always start new concepts with concept_card\n2. Follow concept_card with assessment\n3. Only use prompt_exercise if assessment score >= 4 and a prompt task exists\n4. If assessment score < 3 or significant gaps exist, consider inserting a clarifying concept\n5. Move to next_concept when all tools for current concept are complete\n\nReturn JSON:\n{\n  \"nextTool\": \"concept_card|assessment|prompt_exercise|next_concept\",\n  \"reasoning\": \"Brief explanation of decision\",\n  \"shouldInsertConcept\": true/false,\n  \"conceptNeeded\": {\n    \"reason\": \"specific gap to address if inserting\",\n    \"focus\": \"topic area for new concept\"\n  }\n}`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.3,\n  max_tokens: 200,\n  response_format: { type: \"json_object\" },\n  // Pass through original data\n  originalData: $json\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -20,
          480
        ],
        "id": "17cc3663-9607-4652-9a3c-3cc587eedd66",
        "name": "Grade Assessment Prompt"
      }
    ],
    "pinData": {},
    "connections": {
      "Main Webhook": {
        "main": [
          [
            {
              "node": "Init Course Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Session State Manager": {
        "main": [
          [
            {
              "node": "Route by State",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Route by State": {
        "main": [
          [
            {
              "node": "Course Completion",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Welcome Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Orchestrator Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Tool Router": {
        "main": [
          [
            {
              "node": "Concept Card Handler",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Assessment Handler",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Prompt Exercise Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Concept Card Handler": {
        "main": [
          [
            {
              "node": "Need Smart Reply?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Need Smart Reply?": {
        "main": [
          [
            {
              "node": "Generate Smart Reply",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 3
            }
          ]
        ]
      },
      "Generate Smart Reply": {
        "main": [
          [
            {
              "node": "Add Smart Reply",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add Smart Reply": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 2
            }
          ]
        ]
      },
      "Assessment Handler": {
        "main": [
          [
            {
              "node": "Need Grading?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Need Grading?": {
        "main": [
          [
            {
              "node": "Grade Assessment Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 4
            }
          ]
        ]
      },
      "Grade Assessment": {
        "main": [
          []
        ]
      },
      "Process Grading": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 6
            }
          ]
        ]
      },
      "Prompt Exercise Handler": {
        "main": [
          [
            {
              "node": "Need Evaluation?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Need Evaluation?": {
        "main": [
          [
            {
              "node": "Evaluate Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 5
            }
          ]
        ]
      },
      "Evaluate Prompt": {
        "main": [
          [
            {
              "node": "Process Evaluation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Evaluation": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 7
            }
          ]
        ]
      },
      "Generate New Concept": {
        "main": [
          [
            {
              "node": "Insert Concept",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Insert Concept": {
        "main": [
          [
            {
              "node": "Tool Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Complete Concept": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 9
            }
          ]
        ]
      },
      "Course Completion": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Welcome Message": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge Responses": {
        "main": [
          [
            {
              "node": "Limit Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reset Session Webhook": {
        "main": [
          [
            {
              "node": "Reset Session",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reset Session": {
        "main": [
          [
            {
              "node": "Reset Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Init Course Data": {
        "main": [
          [
            {
              "node": "Session State Manager",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Limit Data": {
        "main": [
          [
            {
              "node": "Webhook Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking 'Test workflow'": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Init Course Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Orchestrator Prompt": {
        "main": [
          [
            {
              "node": "Orchestrator AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Orchestrator AI Call": {
        "main": [
          [
            {
              "node": "Process Orchestrator Decision",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Orchestrator Decision": {
        "main": [
          [
            {
              "node": "Check Next Action",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Next Action": {
        "main": [
          [
            {
              "node": "Tool Router",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Complete Concept",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Generate New Concept",
              "type": "main",
              "index": 0
            }
          ],
          [],
          []
        ]
      },
      "Grade Assessment Prompt": {
        "main": [
          [
            {
              "node": "Grade Assessment AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Grade Assessment AI Call": {
        "main": [
          [
            {
              "node": "Process Grading",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": true,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "f1796f14-9347-48af-9850-5d090789fa10",
    "meta": {
      "instanceId": "eea8bfa4918320bc469ce323a7b217b8209b639e450c67bc3e6a88bdf340b7de"
    },
    "id": "tlnqJBJCffwxoOW7",
    "tags": []
  }