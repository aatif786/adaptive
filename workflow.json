{
    "name": "My workflow 4",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "adaptive-instructor",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "ea8b9de2-3076-4f2f-a606-c21a619a3a1b",
        "name": "Main Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1.1,
        "position": [
          -3520,
          500
        ],
        "webhookId": "9ef00e80-0d3e-4fcb-b8ff-e621ee6fc02e"
      },
      {
        "parameters": {
          "jsCode": "// Enhanced Session State Manager - Handles all session state logic INCLUDING state machine\nconst sessionId = $json.sessionId || 'default-session';\nconst action = $json.action || 'start';\nconst learnerInput = $json.learnerInput || {};\n\n// State Machine Configuration\nconst STATE_MACHINE = {\n  states: {\n    UNINITIALIZED: 'uninitialized',\n    WELCOME: 'welcome',\n    CONCEPT_CARD: 'concept_card',\n    ASSESSMENT_READY: 'assessment_ready',\n    ASSESSMENT_SUBMITTED: 'assessment_submitted',\n    ASSESSMENT_GRADED: 'assessment_graded',\n    PROMPT_EXERCISE: 'prompt_exercise',\n    CONCEPT_COMPLETE: 'concept_complete',\n    COURSE_COMPLETE: 'course_complete'\n  },\n  transitions: {\n    // Core Orchestrator handles these (deterministic)\n    core: {\n      'start': { from: 'uninitialized', to: 'welcome' },\n      'submit_assessment': { from: 'assessment_ready', to: 'assessment_submitted' },\n      'grading_complete': { from: 'assessment_submitted', to: 'assessment_graded' }\n    },\n    // Adaptive Orchestrator handles these (requires LLM)\n    adaptive: {\n      'assessment_graded': ['prompt_exercise', 'concept_complete', 'concept_card'],\n      'concept_card_complete': ['assessment_ready', 'concept_card'],\n      'prompt_complete': ['concept_complete', 'concept_card']\n    }\n  }\n};\n\n// Initialize or retrieve session state\nlet sessionState = $getWorkflowStaticData('global');\nif (!sessionState.sessions) {\n  sessionState.sessions = {};\n}\n\n// Initialize new session if needed\nif (!sessionState.sessions[sessionId] || action === 'start') {\n  sessionState.sessions[sessionId] = {\n    // Original state\n    currentConceptIndex: 0,\n    completedConcepts: [],\n    remainingCoreConcepts: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    insertedConcepts: [],\n    interactionHistory: [],\n    currentConcept: null,\n    lastToolUsed: null,\n    currentConceptTools: [],\n    lastAssessmentScore: null,\n    knowledgeGaps: [],\n    knowledgeStrengths: [],\n    knowledgeEvolution: [],\n    assessmentHistory: [],\n    gapAttempts: {},\n    deferredGaps: [],\n    gapConceptHistory: {},\n    recentQuestions: [],\n    \n    // NEW: State Machine tracking\n    stateMachine: {\n      currentState: STATE_MACHINE.states.UNINITIALIZED,\n      previousState: null,\n      stateHistory: [],\n      lastTransition: null,\n      pendingGrading: false\n    }\n  };\n}\n\nconst session = sessionState.sessions[sessionId];\n\n// Process learner input based on last tool used\nif (learnerInput && session.lastToolUsed) {\n  session.interactionHistory.push({\n    concept: session.currentConcept?.title,\n    tool: session.lastToolUsed,\n    input: learnerInput,\n    timestamp: new Date().toISOString()\n  });\n  \n  // Track recent questions\n  if (learnerInput.note) {\n    session.recentQuestions.push(learnerInput.note);\n    if (session.recentQuestions.length > 5) {\n      session.recentQuestions.shift();\n    }\n  }\n}\n\n// NEW: Handle special state transitions\nif (action === 'submit_response' && session.lastToolUsed === 'assessment' && learnerInput.answer) {\n  // Mark that grading is pending\n  session.stateMachine.pendingGrading = true;\n}\n\n// Get course data\nconst courseTopic = $json.courseTopic;\nconst learnerProfile = $json.learnerProfile;\nconst coreConcepts = $json.coreConcepts;\n\n// Determine current concept (existing logic)\nif (!session.currentConcept || action === 'next_concept') {\n  let nextConcept;\n  \n  if (session.insertedConcepts.length > 0) {\n    nextConcept = session.insertedConcepts.shift();\n  } else if (session.remainingCoreConcepts.length > 0) {\n    const nextId = session.remainingCoreConcepts[0];\n    nextConcept = coreConcepts.find(c => c.id === nextId);\n  } else {\n    nextConcept = null;\n  }\n  \n  if (nextConcept) {\n    session.currentConcept = nextConcept;\n    session.currentConceptTools = [];\n  }\n}\n\n// Save session state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Determine orchestrator type needed\nlet orchestratorType = 'none';\n\n// Check if this needs Core Orchestrator (deterministic routing)\nif (action === 'start' && session.stateMachine.currentState === 'uninitialized') {\n  orchestratorType = 'core';\n  session.stateMachine.nextExpectedState = 'welcome';\n} else if (action === 'submit_response' && session.lastToolUsed === 'assessment' && learnerInput.answer) {\n  orchestratorType = 'core';\n  session.stateMachine.nextExpectedState = 'assessment_submitted';\n} else if (session.stateMachine.pendingGrading && session.lastAssessmentScore !== null) {\n  // Grading just completed\n  orchestratorType = 'adaptive'; // Need LLM to decide next step\n  session.stateMachine.pendingGrading = false;\n} else if (action === 'next' && session.currentConcept) {\n  // Need to decide what tool to show next\n  orchestratorType = 'adaptive';\n}\n\nreturn {\n  sessionId,\n  action,\n  learnerInput,\n  sessionState: session,\n  courseTopic,\n  learnerProfile,\n  coreConcepts,\n  currentConcept: session.currentConcept,\n  courseComplete: !session.currentConcept && \n                  session.remainingCoreConcepts.length === 0 && \n                  session.insertedConcepts.length === 0,\n  \n  // NEW: State machine data\n  currentState: session.stateMachine.currentState,\n  orchestratorType,\n  stateMachineConfig: STATE_MACHINE\n};"
        },
        "id": "1bf4e08e-812b-43d6-9f3b-f855124799d1",
        "name": "Session State Manager",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -3080,
          400
        ]
      },
      {
        "parameters": {
          "jsCode": "// Course Completion Handler\nconst sessionId = $json.sessionId;\nconst session = $json.sessionState;\n\n// Calculate final statistics\nconst totalConcepts = session.completedConcepts.length;\nconst coreConceptsCompleted = session.completedConcepts.filter(id => \n  typeof id === 'number'\n).length;\nconst dynamicConceptsCompleted = totalConcepts - coreConceptsCompleted;\n\n// Prepare completion response\nconst responseData = {\n  sessionId,\n  toolType: 'course_complete',\n  courseComplete: true,\n  toolData: {\n    title: 'Congratulations! Course Complete',\n    summary: `You've successfully completed all ${totalConcepts} concepts in the course.`,\n    statistics: {\n      coreConceptsCompleted,\n      dynamicConceptsAdded: dynamicConceptsCompleted,\n      totalInteractions: session.interactionHistory.length\n    },\n    message: 'Great job completing the AI Native Product Manager course!'\n  },\n  waitingForInput: false\n};\n\nreturn {\n  responseData\n};"
        },
        "id": "12bb91ad-3f12-49ad-bc5f-5f1168b098a1",
        "name": "Course Completion",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          0
        ]
      },
      {
        "parameters": {
          "jsCode": "// Welcome Message for Course Start\nconst sessionId = $json.sessionId;\nconst courseTopic = $json.courseTopic;\n\nconst responseData = {\n  sessionId,\n  toolType: 'welcome',\n  toolData: {\n    title: `Welcome to: ${courseTopic}`,\n    message: 'This adaptive course will guide you through 10 core concepts with personalized instruction based on your progress.',\n    instructions: 'Click Next to begin with the first concept.'\n  },\n  waitingForInput: false,\n  nextAction: 'start_course'\n};\n\nreturn {\n  ...($json),\n  responseData\n};"
        },
        "id": "c8c482e5-1068-4324-9fd7-dfbc727ef66b",
        "name": "Welcome Message",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          200
        ]
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ ['concept_card', 'insert_concept'].includes($json.nextAction) }}",
                      "rightValue": "concept_card",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "id": "tool1"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "conceptCard"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "assessment",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "tool2"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "assessment"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "prompt_exercise",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "tool3"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "promptExercise"
              }
            ]
          },
          "options": {}
        },
        "id": "105382c9-bcd2-45a1-a461-7418049985c9",
        "name": "Tool Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -660,
          900
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Concept Card Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerNote = $json.learnerInput?.note;\n\n// Update session state\nconst session = $json.sessionState;\nif (!session.currentConceptTools.includes('concept_card')) {\n  session.currentConceptTools.push('concept_card');\n}\nsession.lastToolUsed = 'concept_card';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'concept_card',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    title: concept.title,\n    summary: concept.summary,\n    expertTips: concept.expertTips,\n    canSubmitNote: true\n  },\n  waitingForInput: !learnerNote,\n  inputType: 'note',\n  message: 'Read through the concept and feel free to add any notes or questions.'\n};\n\n// If we have a note, we need to generate a smart reply\nif (learnerNote) {\n  return {\n    ...($json),\n    needsSmartReply: true,\n    learnerNote,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsSmartReply: false,\n  responseData\n};"
        },
        "id": "e98c526a-8d16-4b63-87dc-fe6d3843cf4b",
        "name": "Concept Card Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -440,
          675
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict",
              "version": 1
            },
            "conditions": [
              {
                "leftValue": "={{ $json.needsSmartReply }}",
                "rightValue": "={{ true }}",
                "operator": {
                  "type": "boolean",
                  "operation": "true"
                },
                "id": "needreply"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "97e6a31e-2ba1-4c4a-ba0a-1ce820da8f0c",
        "name": "Need Smart Reply?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.1,
        "position": [
          -220,
          675
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gpt-4o"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are a helpful AI instructor providing brief, encouraging responses to learner comments. Keep responses under 3 sentences and personalized to their role.\"}, {\"role\": \"user\", \"content\": \"The learner submitted this comment while learning about '{{ $json.currentConcept.title }}':\\n'{{ $json.learnerNote }}'\\n\\nGenerate a brief, encouraging response that acknowledges their input, provides clarification if needed, and maintains engagement. The learner is a {{ $json.learnerProfile.role }}.\\n\\nRespond in plain text, not JSON.\"}]"
              },
              {
                "name": "temperature",
                "value": "0.7"
              },
              {
                "name": "max_tokens",
                "value": "150"
              }
            ]
          },
          "options": {}
        },
        "id": "4b08075e-071b-4784-ad20-811777af679f",
        "name": "Generate Smart Reply",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          0,
          600
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Add Smart Reply to Response\nconst smartReply = $json.choices[0].message.content;\nconst responseData = $node[\"Concept Card Handler\"].json.responseData;\n\n// Add smart reply to response\nresponseData.toolData.smartReply = smartReply;\nresponseData.waitingForInput = false;\nresponseData.nextAction = 'Click Next to continue to the assessment';\n\nreturn {\n  ...($node[\"Concept Card Handler\"].json),\n  responseData\n};"
        },
        "id": "2247ae0a-2359-47ba-b7ba-371f195d4722",
        "name": "Add Smart Reply",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          600
        ]
      },
      {
        "parameters": {
          "jsCode": "// Assessment Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerAnswer = $json.learnerInput?.answer;\nconst session = $json.sessionState;\n\n// Update session state\nif (!session.currentConceptTools.includes('assessment')) {\n  session.currentConceptTools.push('assessment');\n}\nsession.lastToolUsed = 'assessment';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'assessment',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    question: concept.assessmentQuestion,\n    conceptTitle: concept.title\n  },\n  waitingForInput: !learnerAnswer,\n  inputType: 'answer',\n  message: 'Answer the question to check your understanding.'\n};\n\n// If we have an answer, we need to grade it\nif (learnerAnswer) {\n  return {\n    ...($json),\n    needsGrading: true,\n    learnerAnswer,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsGrading: false,\n  responseData\n};"
        },
        "id": "20b424af-7d76-4d88-b9f6-baccecb434f1",
        "name": "Assessment Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          900
        ]
      },
      {
        "parameters": {
          "jsCode": "// Process Combined Grading and Knowledge Analysis\nconst result = JSON.parse($json.choices[0].message.content);\nconst responseData = $node[\"Assessment Handler\"].json.responseData;\nconst sessionId = $node[\"Assessment Handler\"].json.sessionId;\nconst currentConcept = $node[\"Assessment Handler\"].json.currentConcept;\n\n// Get session\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Update assessment score\nsession.lastAssessmentScore = result.score;\n\n// Update knowledge state from the combined analysis\nif (result.knowledgeUpdate) {\n  session.knowledgeStrengths = result.knowledgeUpdate.updatedStrengths || [];\n  session.knowledgeGaps = result.knowledgeUpdate.updatedGaps || [];\n  \n  // Track knowledge evolution\n  if (!session.knowledgeEvolution) {\n    session.knowledgeEvolution = [];\n  }\n  \n  session.knowledgeEvolution.push({\n    timestamp: new Date().toISOString(),\n    concept: currentConcept.title,\n    conceptId: currentConcept.id,\n    isDynamic: currentConcept.isDynamic || false,\n    score: result.score,\n    strengths: result.knowledgeUpdate.updatedStrengths,\n    gaps: result.knowledgeUpdate.updatedGaps,\n    reasoning: result.knowledgeUpdate.reasoning\n  });\n}\n\nif (currentConcept.isDynamic && result.score >= 3 && currentConcept.targetedGaps) {\n  session.knowledgeGaps = session.knowledgeGaps.filter(\n    gap => !currentConcept.targetedGaps.includes(gap)\n  );\n}\n\n// Track assessment history\nif (!session.assessmentHistory) {\n  session.assessmentHistory = [];\n}\n\nsession.assessmentHistory.push({\n  concept: currentConcept.title,\n  conceptId: currentConcept.id,\n  score: result.score,\n  timestamp: new Date().toISOString()\n});\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Add grading to response\nresponseData.toolData.gradingResult = {\n  score: result.score,\n  feedback: result.feedback,\n  understood: result.understood\n};\nresponseData.waitingForInput = false;\nresponseData.nextAction = result.score >= 4 ? \n  'Excellent work! Click Next to continue.' : \n  result.score >= 3 ?\n  'Good understanding! Click Next to continue.' :\n  'Let\\'s reinforce this concept. Click Next to continue.';\n\nreturn {\n  ...($node[\"Assessment Handler\"].json),\n  gradingResult: result,\n  responseData,\n  knowledgeState: {\n    strengths: session.knowledgeStrengths,\n    gaps: session.knowledgeGaps\n  }\n};"
        },
        "id": "62e829fb-caf5-490d-89c6-d876fb53f4b4",
        "name": "Process Grading",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          400
        ]
      },
      {
        "parameters": {
          "jsCode": "// Prompt Exercise Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerPrompt = $json.learnerInput?.prompt;\nconst session = $json.sessionState;\n\n// Update session state\nif (!session.currentConceptTools.includes('prompt_exercise')) {\n  session.currentConceptTools.push('prompt_exercise');\n}\nsession.lastToolUsed = 'prompt_exercise';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'prompt_exercise',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    task: concept.promptTask,\n    conceptTitle: concept.title\n  },\n  waitingForInput: !learnerPrompt,\n  inputType: 'prompt',\n  message: 'Practice your prompt engineering skills with this task.'\n};\n\n// If we have a prompt, we need to evaluate it\nif (learnerPrompt) {\n  return {\n    ...($json),\n    needsEvaluation: true,\n    learnerPrompt,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsEvaluation: false,\n  responseData\n};"
        },
        "id": "994762b1-a884-4ca1-a8bc-5365dfd893de",
        "name": "Prompt Exercise Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -440,
          1125
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "={{ $json.needsEvaluation }}",
                "rightValue": "={{ true }}",
                "operator": {
                  "type": "boolean",
                  "operation": "true"
                },
                "id": "needeval"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "7ec0b707-324e-463d-aa26-a9d0ab0e3cc7",
        "name": "Need Evaluation?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.1,
        "position": [
          -220,
          1125
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gpt-4o"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are an expert at evaluating AI prompts for product management tasks. Return your evaluation as a JSON object.\"}, {\"role\": \"user\", \"content\": \"Task: {{ $json.currentConcept.promptTask }}\\nLearner's Prompt: {{ $json.learnerPrompt }}\\nLearner Background: {{ $json.learnerProfile.role }} with skills in {{ $json.learnerProfile.skills.join(', ') }}\\n\\nEvaluate the prompt and return a JSON object with this exact structure:\\n{\\n  \\\"score\\\": (0-5 number),\\n  \\\"feedback\\\": \\\"Constructive feedback\\\",\\n  \\\"strengths\\\": [\\\"what they did well\\\"],\\n  \\\"improvements\\\": [\\\"specific suggestions\\\"],\\n  \\\"simulatedAIResponse\\\": \\\"What an AI would generate from this prompt\\\"\\n}\"}]"
              },
              {
                "name": "temperature",
                "value": "0.7"
              },
              {
                "name": "max_tokens",
                "value": "300"
              },
              {
                "name": "response_format",
                "value": "={{ {\"type\": \"json_object\"} }}"
              }
            ]
          },
          "options": {}
        },
        "id": "589ebfbf-04ed-4418-aec3-b7d033649059",
        "name": "Evaluate Prompt",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          0,
          1200
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process Prompt Evaluation\nconst evaluationResult = JSON.parse($json.choices[0].message.content);\nconst responseData = $node[\"Prompt Exercise Handler\"].json.responseData;\n\n// Add evaluation to response\nresponseData.toolData.evaluationResult = evaluationResult;\nresponseData.waitingForInput = false;\nresponseData.nextAction = 'Click Next to continue to the next concept.';\n\nreturn {\n  ...($node[\"Prompt Exercise Handler\"].json),\n  evaluationResult,\n  responseData\n};"
        },
        "id": "fb3a3510-9b2d-464b-aaf4-5a8645fbc535",
        "name": "Process Evaluation",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          1200
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Insert New Concept and Set as Current\nconst newConcept = JSON.parse($json.choices[0].message.content);\n\n// Get the original data from the correct previous node\nconst originalData = $node[\"Generate New Concept Prompt\"].json.originalData;\nconst sessionId = originalData.sessionId;\nconst orchestratorDecision = originalData.orchestratorDecision;\nconst sessionState = originalData.sessionState;\n\n// Add metadata to new concept\nnewConcept.id = `dynamic_${Date.now()}`;\nnewConcept.isCore = false;\nnewConcept.isDynamic = true;\n\n// Set targeted gaps from orchestrator decision\nconst targetGap = orchestratorDecision.conceptNeeded.reason || sessionState.knowledgeGaps[0];\nnewConcept.targetedGaps = [targetGap];\nnewConcept.targetedGap = targetGap; // Keep both for compatibility\n\n// Get session from workflow static data\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Increment the attempt counter for this gap\nif (targetGap) {\n  if (!session.gapAttempts) session.gapAttempts = {};\n  session.gapAttempts[targetGap] = (session.gapAttempts[targetGap] || 0) + 1;\n  newConcept.attemptNumber = session.gapAttempts[targetGap];\n}\n\n// IMPORTANT: Mark the struggling concept as completed so we don't return to it\nif (session.currentConcept && session.currentConcept.isCore) {\n  // Add the original concept to completed list\n  session.completedConcepts.push(session.currentConcept.id);\n  \n  // Remove it from remaining core concepts\n  session.remainingCoreConcepts = session.remainingCoreConcepts.filter(\n    id => id !== session.currentConcept.id\n  );\n}\n\n// Set the new concept as current\nsession.currentConcept = newConcept;\nsession.currentConceptTools = []; // Fresh start for the new concept\nsession.lastToolUsed = null;\n\n// Clear previous assessment data since this is a new concept\nsession.lastAssessmentScore = null;\nsession.knowledgeGaps = []; // Clear the gaps\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Return with the updated current concept\nreturn {\n  ...originalData,\n  currentConcept: newConcept,\n  sessionState: session, // Pass updated session state\n  nextAction: 'concept_card',\n  newConceptInserted: true\n};"
        },
        "id": "e6225627-6936-447f-ba33-92ab36bbc005",
        "name": "Insert Concept",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -880,
          575
        ]
      },
      {
        "parameters": {
          "jsCode": "// Complete Current Concept and Move to Next\nconst sessionId = $json.sessionId;\nconst currentConcept = $json.currentConcept;\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Mark current concept as completed\nif (currentConcept) {\n  session.completedConcepts.push(currentConcept.id);\n  \n  // Remove from remaining if it was a core concept\n  if (currentConcept.isCore) {\n    session.remainingCoreConcepts = session.remainingCoreConcepts.filter(\n      id => id !== currentConcept.id\n    );\n  }\n}\n\n// Reset for next concept - THIS IS THE FIX\nsession.currentConcept = null;\nsession.currentConceptTools = []; // This should be empty!\nsession.lastToolUsed = null;\nsession.lastAssessmentScore = null; // Also clear this\nsession.knowledgeGaps = []; // And this\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Prepare response to move to next concept\nconst responseData = {\n  sessionId,\n  toolType: 'transition',\n  conceptProgress: {\n    current: session.completedConcepts.length,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    completedConcept: currentConcept?.title,\n    message: 'Moving to next concept...'\n  },\n  waitingForInput: false,\n  nextAction: 'auto_continue'\n};\n\nreturn {\n  ...($json),\n  responseData,\n  moveToNext: true\n};"
        },
        "id": "cd7e4801-dcf5-42e4-b832-8979f3a95cd2",
        "name": "Complete Concept",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          1400
        ]
      },
      {
        "parameters": {
          "numberInputs": 10
        },
        "id": "96a252dc-c125-4964-92b4-e02a7094b939",
        "name": "Merge Responses",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3,
        "position": [
          440,
          603
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "fd65523c-3f4e-4dd5-93c2-c22496358174",
        "name": "Webhook Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.1,
        "position": [
          880,
          750
        ]
      },
      {
        "parameters": {
          "path": "reset-session",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "96b78c16-369a-4eac-bbca-3047131bf1fd",
        "name": "Reset Session Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1.1,
        "position": [
          -3740,
          1660
        ],
        "webhookId": "594653ea-5a3e-4e99-9a1d-c2ecdf0f5c56"
      },
      {
        "parameters": {
          "jsCode": "// Reset Session\nconst sessionId = $json.query?.sessionId || 'default-session';\n\n// Clear session data\nconst sessionState = $getWorkflowStaticData('global');\nif (sessionState.sessions && sessionState.sessions[sessionId]) {\n  delete sessionState.sessions[sessionId];\n}\n\nreturn {\n  success: true,\n  message: `Session ${sessionId} has been reset`,\n  sessionId\n};"
        },
        "id": "797eefe9-48f7-4ac7-a647-a5787c8b0d53",
        "name": "Reset Session",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -3520,
          1660
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "b106a3c1-10ec-456d-aa88-dad4fa19ce91",
        "name": "Reset Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.1,
        "position": [
          -3300,
          1660
        ]
      },
      {
        "parameters": {
          "jsCode": "// Extract webhook data from the first item in the array\nconst webhookData = $input.first().json.body;\n\n// Add course data\nreturn {\n  sessionId: webhookData.sessionId,\n  userName: webhookData.userName,\n  action: webhookData.action,\n  learnerInput: webhookData.learnerInput,\n  courseTopic: \"How to Become an AI Native Product Manager\",\n  learnerProfile: {\n    role: \"Product Manager\",\n    company: \"TechCorp\",\n    skills: [\"Agile\", \"User Research\", \"Basic Python\"]\n  },\n  coreConcepts: [\n    {\n      \"id\": 1,\n      \"title\": \"Understanding AI Capabilities\",\n      \"summary\": \"Learn what AI can and cannot do in product management\",\n      \"expertTips\": [\"Focus on problem-solving, not just technology\", \"Start with user needs\"],\n      \"assessmentQuestion\": \"What is the primary consideration when integrating AI into a product?\",\n      \"correctAnswer\": \"User value and problem-solution fit\",\n      \"promptTask\": \"Write a prompt to help identify user pain points for a fitness app\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 2,\n      \"title\": \"AI-First Product Strategy\",\n      \"summary\": \"Develop strategies that leverage AI as a core differentiator\",\n      \"expertTips\": [\"Think beyond automation\", \"Consider AI as a team member\"],\n      \"assessmentQuestion\": \"How does AI-first differ from AI-enabled products?\",\n      \"correctAnswer\": \"AI-first products have AI at their core value proposition, not just as an enhancement\",\n      \"promptTask\": \"Create a prompt to brainstorm AI-first features for an e-commerce platform\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 3,\n      \"title\": \"Prompt Engineering for PMs\",\n      \"summary\": \"Master the art of writing effective prompts for product tasks\",\n      \"expertTips\": [\"Be specific and contextual\", \"Iterate based on outputs\"],\n      \"assessmentQuestion\": \"What makes a product management prompt effective?\",\n      \"correctAnswer\": \"Clear context, specific goals, and measurable outcomes\",\n      \"promptTask\": \"Write a prompt to generate user stories for a new feature\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 4,\n      \"title\": \"AI Ethics in Product Design\",\n      \"summary\": \"Navigate ethical considerations when building AI products\",\n      \"expertTips\": [\"Consider bias in data and algorithms\", \"Prioritize transparency\"],\n      \"assessmentQuestion\": \"What is the most important ethical consideration for AI products?\",\n      \"correctAnswer\": \"Ensuring fairness and preventing harm to users\",\n      \"promptTask\": \"Draft a prompt to identify potential ethical issues in a healthcare AI product\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 5,\n      \"title\": \"Measuring AI Product Success\",\n      \"summary\": \"Define and track metrics for AI-powered features\",\n      \"expertTips\": [\"Balance accuracy with user satisfaction\", \"Track both technical and business metrics\"],\n      \"assessmentQuestion\": \"Beyond accuracy, what metric is crucial for AI products?\",\n      \"correctAnswer\": \"User trust and adoption rate\",\n      \"promptTask\": \"Create a prompt to generate a metrics dashboard for an AI feature\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 6,\n      \"title\": \"Cross-functional AI Collaboration\",\n      \"summary\": \"Work effectively with data scientists and ML engineers\",\n      \"expertTips\": [\"Learn the language of AI teams\", \"Focus on outcomes, not algorithms\"],\n      \"assessmentQuestion\": \"What's the PM's primary role in AI development?\",\n      \"correctAnswer\": \"Translating user needs into technical requirements and ensuring alignment\",\n      \"promptTask\": \"Write a prompt to create a collaboration plan between PM and AI teams\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 7,\n      \"title\": \"AI Product Roadmapping\",\n      \"summary\": \"Plan and prioritize AI features in your roadmap\",\n      \"expertTips\": [\"Account for uncertainty in AI development\", \"Build in experimentation time\"],\n      \"assessmentQuestion\": \"How does AI impact traditional roadmapping?\",\n      \"correctAnswer\": \"Requires more flexibility and iterative approaches due to uncertainty\",\n      \"promptTask\": \"Generate a prompt for creating an AI feature prioritization matrix\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 8,\n      \"title\": \"User Research for AI Products\",\n      \"summary\": \"Conduct research to understand AI product needs\",\n      \"expertTips\": [\"Test AI interactions early\", \"Understand user mental models of AI\"],\n      \"assessmentQuestion\": \"What's unique about user research for AI products?\",\n      \"correctAnswer\": \"Need to understand user expectations and trust in AI systems\",\n      \"promptTask\": \"Create a prompt for designing an AI product user interview guide\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 9,\n      \"title\": \"AI Product Launch Strategies\",\n      \"summary\": \"Successfully launch and iterate on AI features\",\n      \"expertTips\": [\"Start with beta users\", \"Communicate limitations clearly\"],\n      \"assessmentQuestion\": \"What's critical for AI product launches?\",\n      \"correctAnswer\": \"Setting proper expectations and having a feedback loop for improvements\",\n      \"promptTask\": \"Write a prompt to create an AI feature launch checklist\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 10,\n      \"title\": \"Future of AI in Product Management\",\n      \"summary\": \"Prepare for emerging AI trends and technologies\",\n      \"expertTips\": [\"Stay curious about new AI capabilities\", \"Think about AI as augmentation\"],\n      \"assessmentQuestion\": \"How will AI change the PM role itself?\",\n      \"correctAnswer\": \"AI will augment PM capabilities, enabling data-driven decisions at scale\",\n      \"promptTask\": \"Generate a prompt to explore future AI use cases in your industry\",\n      \"isCore\": true\n    }\n  ]\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -3300,
          400
        ],
        "id": "e3e60765-ac9f-4eca-89f5-1345f9637886",
        "name": "Init Course Data"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Extract Response Data\nconst responseData = $json.responseData;\n\nif (!responseData) {\n  throw new Error('No responseData found in input');\n}\n\nreturn responseData;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          660,
          750
        ],
        "id": "6c95a2ab-4737-4e59-8cdb-601a6ff03f3d",
        "name": "Limit Data"
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -3740,
          300
        ],
        "id": "effd9526-5f2d-451b-9c65-d2833053562a",
        "name": "When clicking 'Test workflow'"
      },
      {
        "parameters": {
          "mode": "raw",
          "jsonOutput": "{\n  \"body\": {\n    \"sessionId\": \"manual_session\",\n    \"userName\": \"Mohammed Ali\",\n    \"action\": \"next\",\n    \"learnerInput\": {}\n  }\n}",
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -3520,
          300
        ],
        "id": "142a07db-b0f3-4226-a480-805447fc1890",
        "name": "Edit Fields"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6131214d-57dc-4724-a4ee-daa86b8687ff",
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "=insert_concept",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "insertNewConcept"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c41e007c-c9f8-4e01-9c3b-f5416eaa4575",
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "=concept_complete",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "completeConcept"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ ['concept_card', 'assessment', 'prompt_exercise'].includes($json.nextAction) }}",
                      "rightValue": "={{ true }}",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "id": "252d4b84-cc5a-482b-b966-c78ad46410f5"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "routeToTool"
              }
            ]
          },
          "options": {}
        },
        "id": "466ee47d-fefe-4842-9fe8-821b976ec12e",
        "name": "Check Next Action",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -1540,
          975
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "386b2aa4-f6b7-4304-aa88-cee4df29dfb7",
        "name": "Grade Assessment AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          0,
          400
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Combined Grade Assessment and Knowledge Analysis Prompt\nconst messages = [\n  {\n    role: \"system\",\n    content: \"You are an expert instructional coach who evaluates learner understanding AND tracks their evolving knowledge state. Analyze both the current answer and overall knowledge progression.\"\n  },\n  {\n    role: \"user\", \n    content: `Context:\n- Course Topic: ${$json.courseTopic}\n- Current Concept: ${$json.currentConcept.title}\n- Question: ${$json.currentConcept.assessmentQuestion}\n- Correct Answer: ${$json.currentConcept.correctAnswer}\n- Learner's Answer: ${$json.learnerAnswer}\n- Learner Profile: ${$json.learnerProfile.role} at ${$json.learnerProfile.company}\n\nCurrent Knowledge State:\n- Strengths: ${$json.sessionState.knowledgeStrengths?.join(', ') || 'None tracked yet'}\n- Gaps: ${$json.sessionState.knowledgeGaps?.join(', ') || 'None tracked yet'}\n\nAssessment Context:\n- Is this a dynamic concept?: ${$json.currentConcept.isDynamic || false}\n- Targeted gaps (if dynamic): ${$json.currentConcept.targetedGaps?.join(', ') || 'N/A'}\n- Previous score: ${$json.sessionState.lastAssessmentScore || 'N/A'}\n\nEvaluate the answer AND update their knowledge state. Return JSON:\n{\n  \"score\": (0-5 number),\n  \"feedback\": \"Brief, encouraging feedback\",\n  \"understood\": (true or false),\n  \"knowledgeUpdate\": {\n    \"updatedStrengths\": [\"Complete list of what learner knows well\"],\n    \"updatedGaps\": [\"Complete list of significant gaps needing attention\"],\n    \"reasoning\": \"Brief explanation of knowledge state changes\"\n  }\n}\n\nGrading Rules:\n- 5: Perfect understanding\n- 4: Good understanding with minor gaps\n- 3: Adequate understanding for progression\n- 2: Significant gaps but some understanding\n- 0-1: Major misunderstanding\n\nKnowledge Rules:\n- Add strengths for demonstrated understanding (scores 3+)\n- Remove gaps that were successfully addressed\n- Only list actionable, specific gaps\n- For dynamic concepts addressing gaps, be generous if progress is shown\n- Empty gaps array means no significant issues`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.3,\n  max_tokens: 400,\n  response_format: { type: \"json_object\" },\n  originalData: $json\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -220,
          400
        ],
        "id": "6e045226-b64a-4a6d-b917-58b19be3ee51",
        "name": "Grade Assessment Prompt"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Generate Concept Prompt - Prepares prompt for creating new adaptive concepts\nconst messages = [\n  {\n    role: \"system\",\n    content: \"Generate a new mini-concept to address a specific learning gap. The concept MUST directly target the identified gap, and the assessment question MUST verify the learner understands the gap area. Focus on building a bridge from their current understanding to the correct concept.\"\n  },\n  {\n    role: \"user\", \n    content: `Context:\n- Main Topic: ${$json.courseTopic}\n- Current Concept: ${$json.currentConcept.title}\n- Knowledge Gap: ${$json.orchestratorDecision.conceptNeeded.reason}\n- Specific Gap to Address: ${$json.sessionState.knowledgeGaps?.[0] || $json.orchestratorDecision.conceptNeeded.focus}\n- Learner Profile: ${$json.learnerProfile.role} at ${$json.learnerProfile.company}\n\nThe learner scored ${$json.sessionState.lastAssessmentScore}/5 and showed confusion about: \"${$json.sessionState.knowledgeGaps?.[0] || 'the core concept'}\"\n\nCreate a focused concept that DIRECTLY addresses this specific gap: \"${$json.orchestratorDecision.conceptNeeded.reason}\"\n\nThe assessment question MUST test whether the learner understands: ${$json.sessionState.knowledgeGaps?.[0] || $json.orchestratorDecision.conceptNeeded.focus}\n\nReturn JSON:\n{\n  \"title\": \"Clear, specific title\",\n  \"summary\": \"2-3 sentence overview\",\n  \"expertTips\": [\"2-3 practical tips\"],\n  \"assessmentQuestion\": \"Targeted question to verify understanding\",\n  \"correctAnswer\": \"Brief correct answer\",\n  \"promptTask\": \"Optional - only if relevant to the gap\"\n}`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.7,\n  max_tokens: 400,\n  response_format: { type: \"json_object\" },\n  // Pass through original data\n  originalData: $json\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -1320,
          575
        ],
        "id": "2d488480-b378-4fee-8fc6-a1c6d58e41dd",
        "name": "Generate New Concept Prompt"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "4efb9f86-d47d-49d0-830f-250ebf32531a",
        "name": "Generate New Concept AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -1100,
          575
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.courseComplete }}",
                      "rightValue": "",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "id": "fb1bfec8-6ce7-4051-b9c1-d9672e107a38"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "courseComplete"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "0274538b-67a6-48be-9dd7-515882779b34",
                      "leftValue": "={{ $json.orchestratorType }}",
                      "rightValue": "core",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "coreOrchestrator"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "bda47e36-9353-48ae-98a8-8222b317d394",
                      "leftValue": "={{ $json.orchestratorType }}",
                      "rightValue": "adaptive",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "adaptiveOrchestrator"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "3f2401c6-6a7d-4ee2-b552-c4a940b9387e",
                      "leftValue": "={{ $json.orchestratorType }}",
                      "rightValue": "none",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "directResponse"
              }
            ]
          },
          "options": {}
        },
        "id": "2e987281-8b7b-416d-8624-68645450fdfa",
        "name": "Route to Orchestrator",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -2860,
          379
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Core Orchestrator - Handles deterministic state transitions\n// This node handles mechanical routing that doesn't need AI\n\nconst action = $json.action;\nconst currentState = $json.currentState;\nconst sessionState = $json.sessionState;\nconst stateMachineConfig = $json.stateMachineConfig;\n\n// Log for debugging\nconsole.log(`Core Orchestrator: Processing ${action} in state ${currentState}`);\n\nlet nextAction = null;\nlet updateState = null;\n\n// Handle deterministic transitions\nswitch (action) {\n  case 'start':\n    if (currentState === 'uninitialized') {\n      nextAction = 'show_welcome';\n      updateState = 'welcome';\n    }\n    break;\n    \n  case 'next':\n    if (currentState === 'welcome') {\n      nextAction = 'concept_card';\n      updateState = 'concept_card';\n    }\n    break;\n    \n  case 'submit_response':\n    // Assessment submission - needs grading\n    if (sessionState.lastToolUsed === 'assessment' && $json.learnerInput?.answer) {\n      nextAction = 'grade_assessment';\n      updateState = 'assessment_submitted';\n    }\n    // Concept card note submission\n    else if (sessionState.lastToolUsed === 'concept_card' && $json.learnerInput?.note) {\n      nextAction = 'process_note';\n      // Stay in same state, but mark note processed\n    }\n    break;\n}\n\n// Update state machine in session\nif (updateState) {\n  const session = $getWorkflowStaticData('global').sessions[$json.sessionId];\n  session.stateMachine.previousState = session.stateMachine.currentState;\n  session.stateMachine.currentState = updateState;\n  session.stateMachine.stateHistory.push({\n    from: currentState,\n    to: updateState,\n    action: action,\n    timestamp: new Date().toISOString(),\n    orchestrator: 'core'\n  });\n  $getWorkflowStaticData('global').sessions[$json.sessionId] = session;\n}\n\n// Return routing decision\nreturn {\n  ...($json),\n  orchestratorDecision: {\n    type: 'core',\n    nextAction: nextAction,\n    updatedState: updateState || currentState,\n    reasoning: `Core routing: ${action} → ${nextAction}`\n  },\n  routeTo: nextAction\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2640,
          400
        ],
        "id": "ad1ad3f2-6de6-4e89-a838-cf98ea0c983f",
        "name": "Core Orchestrator"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.routeTo }}",
                      "rightValue": "show_welcome",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "8691f62e-4d5e-43ff-9a26-5d7b4c81ee13"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "welcome"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "4b5e3875-e16a-4855-9817-960a1cce95ab",
                      "leftValue": "={{ $json.routeTo }}",
                      "rightValue": "concept_card",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "toAdaptiveOrchestrator"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c07fc040-2d20-447e-b1df-286099b45a6a",
                      "leftValue": "={{ $json.routeTo }}",
                      "rightValue": "grade_assessment",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "gradeAssessment"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "7bcbe005-1204-42fd-9854-b542603af35b",
                      "leftValue": "{{ $json.routeTo }}",
                      "rightValue": "processNote",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "processNote"
              }
            ]
          },
          "options": {}
        },
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -2420,
          379
        ],
        "id": "a8f5c0f1-b534-45ea-b001-5cc3ebc1c6b8",
        "name": "Core Router"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Prepare Orchestrator OpenAI request\nconst messages = [\n  {\n    role: \"system\",\n    content: \"You are an adaptive learning orchestrator. Analyze the current learning state and decide the next best action for the learner.\"\n  },\n  {\n    role: \"user\", \n    content: `Current Learning State:\n- Course Topic: ${$json.courseTopic}\n- Current Concept: ${$json.currentConcept?.title || 'None'}\n- Tools Already Used: ${$json.sessionState.currentConceptTools.join(', ') || 'None'}\n- Last Assessment Score: ${$json.sessionState.lastAssessmentScore || 'N/A'}/5\n- Knowledge Gaps: ${$json.sessionState.knowledgeGaps?.join(', ') || 'None'}\n- Gap Attempts: ${JSON.stringify($json.sessionState.gapAttempts || {})}\n- Recent Questions: ${$json.sessionState.recentQuestions?.join('; ') || 'None'}\n- Completed Concepts: ${$json.sessionState.completedConcepts.length}\n- Remaining Core Concepts: ${$json.sessionState.remainingCoreConcepts.length}\n\nRules:\n1. Always start new concepts with concept_card\n2. Follow concept_card with assessment\n3. Only use prompt_exercise if assessment score >= 4 and a prompt task exists\n4. If assessment score < 3 or significant gaps exist, use insert_concept INSTEAD of continuing\n5. Use concept_complete when all tools for current concept are done\n\nReturn JSON:\n{\n  \"nextAction\": \"concept_card|assessment|prompt_exercise|concept_complete|insert_concept\",\n  \"reasoning\": \"Brief explanation of decision\",\n  \"conceptNeeded\": {\n    \"reason\": \"specific gap to address if action is insert_concept\",\n    \"focus\": \"topic area for new concept if inserting\"\n  }\n}`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.3,\n  max_tokens: 200,\n  response_format: { type: \"json_object\" },\n  // Pass through original data\n  originalData: $json\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2200,
          975
        ],
        "id": "06db88ce-a959-484a-b3ae-40106cef6daa",
        "name": "Adaptive Orchestrator Router Prompt"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "5c507846-adac-4cb6-b280-69e318f94781",
        "name": "Adaptive Orchestrator AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -1980,
          975
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Process Orchestrator Decision - This is where we handle the logic\nconst orchestratorDecision = JSON.parse($json.choices[0].message.content);\nconst originalData = $node[\"Adaptive Orchestrator Router Prompt\"].json.originalData;\nconst session = originalData.sessionState;\n\n// Initialize gap tracking if needed\nif (!session.gapAttempts) session.gapAttempts = {};\nif (!session.deferredGaps) session.deferredGaps = [];\n\n// Check if we're trying to insert a concept for a gap we've already attempted multiple times\nif (orchestratorDecision.nextAction === 'insert_concept' && session.knowledgeGaps.length > 0) {\n  // Find which gap this would address\n  const targetGap = session.knowledgeGaps[0]; // or match from conceptNeeded.reason\n  const attempts = session.gapAttempts[targetGap] || 0;\n  \n  if (attempts >= 2) {\n    // Override the orchestrator's decision\n    orchestratorDecision.nextAction = 'concept_complete';\n    orchestratorDecision.reasoning = `Gap \"${targetGap}\" has been attempted ${attempts} times. Moving forward with core curriculum instead of creating another dynamic concept.`;\n    \n    // Move gap to deferred list\n    session.knowledgeGaps = session.knowledgeGaps.filter(gap => gap !== targetGap);\n    session.deferredGaps.push({\n      gap: targetGap,\n      attempts: attempts,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Clean up attempts counter\n    delete session.gapAttempts[targetGap];\n  }\n}\n\n// Save updated session state\n$getWorkflowStaticData('global').sessions[originalData.sessionId] = session;\n\nreturn {\n  ...originalData,\n  orchestratorDecision,\n  nextAction: orchestratorDecision.nextAction,\n  sessionState: session // Pass the updated session state\n};"
        },
        "id": "924dc5db-eb65-4570-9d4b-74c21f2d94a7",
        "name": "Process Adaptive Orchestrator Decision",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -1760,
          975
        ]
      }
    ],
    "pinData": {},
    "connections": {
      "Main Webhook": {
        "main": [
          [
            {
              "node": "Init Course Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Session State Manager": {
        "main": [
          [
            {
              "node": "Route to Orchestrator",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Tool Router": {
        "main": [
          [
            {
              "node": "Concept Card Handler",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Assessment Handler",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Prompt Exercise Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Concept Card Handler": {
        "main": [
          [
            {
              "node": "Need Smart Reply?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Need Smart Reply?": {
        "main": [
          [
            {
              "node": "Generate Smart Reply",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 3
            }
          ]
        ]
      },
      "Generate Smart Reply": {
        "main": [
          [
            {
              "node": "Add Smart Reply",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Add Smart Reply": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 2
            }
          ]
        ]
      },
      "Assessment Handler": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 4
            }
          ]
        ]
      },
      "Process Grading": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 6
            }
          ]
        ]
      },
      "Prompt Exercise Handler": {
        "main": [
          [
            {
              "node": "Need Evaluation?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Need Evaluation?": {
        "main": [
          [
            {
              "node": "Evaluate Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 5
            }
          ]
        ]
      },
      "Evaluate Prompt": {
        "main": [
          [
            {
              "node": "Process Evaluation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Evaluation": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 7
            }
          ]
        ]
      },
      "Insert Concept": {
        "main": [
          [
            {
              "node": "Tool Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Complete Concept": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 9
            }
          ]
        ]
      },
      "Course Completion": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Welcome Message": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge Responses": {
        "main": [
          [
            {
              "node": "Limit Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reset Session Webhook": {
        "main": [
          [
            {
              "node": "Reset Session",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reset Session": {
        "main": [
          [
            {
              "node": "Reset Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Init Course Data": {
        "main": [
          [
            {
              "node": "Session State Manager",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Limit Data": {
        "main": [
          [
            {
              "node": "Webhook Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking 'Test workflow'": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Init Course Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Next Action": {
        "main": [
          [
            {
              "node": "Generate New Concept Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Complete Concept",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Tool Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Grade Assessment Prompt": {
        "main": [
          [
            {
              "node": "Grade Assessment AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Grade Assessment AI Call": {
        "main": [
          [
            {
              "node": "Process Grading",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate New Concept Prompt": {
        "main": [
          [
            {
              "node": "Generate New Concept AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate New Concept AI Call": {
        "main": [
          [
            {
              "node": "Insert Concept",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Route to Orchestrator": {
        "main": [
          [
            {
              "node": "Course Completion",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Core Orchestrator",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Adaptive Orchestrator Router Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [],
          [],
          []
        ]
      },
      "Core Orchestrator": {
        "main": [
          [
            {
              "node": "Core Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Core Router": {
        "main": [
          [
            {
              "node": "Welcome Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Adaptive Orchestrator Router Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Grade Assessment Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adaptive Orchestrator Router Prompt": {
        "main": [
          [
            {
              "node": "Adaptive Orchestrator AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adaptive Orchestrator AI Call": {
        "main": [
          [
            {
              "node": "Process Adaptive Orchestrator Decision",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Adaptive Orchestrator Decision": {
        "main": [
          [
            {
              "node": "Check Next Action",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": true,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "b43e5298-c277-41ce-b1dd-395fdfd30b2d",
    "meta": {
      "instanceId": "eea8bfa4918320bc469ce323a7b217b8209b639e450c67bc3e6a88bdf340b7de"
    },
    "id": "KAufRbE2JWWbkbMk",
    "tags": []
  }