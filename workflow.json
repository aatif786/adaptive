{
    "name": "My workflow 4",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "adaptive-instructor",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "ea8b9de2-3076-4f2f-a606-c21a619a3a1b",
        "name": "Main Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1.1,
        "position": [
          -3520,
          255
        ],
        "webhookId": "9ef00e80-0d3e-4fcb-b8ff-e621ee6fc02e"
      },
      {
        "parameters": {
          "jsCode": "// CLEAN Session State Manager - ONLY manages state storage\n// No business logic, no routing, no decisions\n\nconst sessionId = $json.sessionId || 'default-session';\nconst action = $json.action || 'start';\nconst learnerInput = $json.learnerInput || {};\n\n// Initialize global state store if needed\nlet globalState = $getWorkflowStaticData('global');\nif (!globalState.sessions) {\n  globalState.sessions = {};\n}\n\n// Initialize new session ONLY if it doesn't exist or action is 'start'\nif (!globalState.sessions[sessionId] || action === 'start') {\n  globalState.sessions[sessionId] = {\n    // Learning state\n    currentConceptIndex: 0,\n    completedConcepts: [],\n    remainingCoreConcepts: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    insertedConcepts: [],\n    interactionHistory: [],\n    currentConcept: null,\n    lastToolUsed: null,\n    currentConceptTools: [],\n    lastAssessmentScore: null,\n    knowledgeGaps: [],\n    knowledgeStrengths: [],\n    knowledgeEvolution: [],\n    assessmentHistory: [],\n    gapAttempts: {},\n    deferredGaps: [],\n    gapConceptHistory: {},\n    recentQuestions: [],\n    \n    // State Machine (isolated in global)\n    stateMachine: {\n      currentState: 'uninitialized',\n      previousState: null,\n      stateHistory: [],\n      lastTransition: null,\n      pendingGrading: false\n    },\n    \n    // Metadata\n    createdAt: new Date().toISOString(),\n    lastUpdated: new Date().toISOString()\n  };\n}\n\n// That's it! Just pass through the request data\n// Other nodes will read state directly and make decisions\nreturn {\n  sessionId,\n  action,\n  learnerInput,\n  courseTopic: $json.courseTopic,\n  learnerProfile: $json.learnerProfile,\n  coreConcepts: $json.coreConcepts,\n  userName: $json.userName\n};"
        },
        "id": "1bf4e08e-812b-43d6-9f3b-f855124799d1",
        "name": "Session State Manager",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -3080,
          155
        ]
      },
      {
        "parameters": {
          "jsCode": "// Course Completion Handler\nconst sessionId = $json.sessionId;\nconst session = $json.sessionState;\n\n// Calculate final statistics\nconst totalConcepts = session.completedConcepts.length;\nconst coreConceptsCompleted = session.completedConcepts.filter(id => \n  typeof id === 'number'\n).length;\nconst dynamicConceptsCompleted = totalConcepts - coreConceptsCompleted;\n\n// Prepare completion response\nconst responseData = {\n  sessionId,\n  toolType: 'course_complete',\n  courseComplete: true,\n  toolData: {\n    title: 'Congratulations! Course Complete',\n    summary: `You've successfully completed all ${totalConcepts} concepts in the course.`,\n    statistics: {\n      coreConceptsCompleted,\n      dynamicConceptsAdded: dynamicConceptsCompleted,\n      totalInteractions: session.interactionHistory.length\n    },\n    message: 'Great job completing the AI Native Product Manager course!'\n  },\n  waitingForInput: false\n};\n\nreturn {\n  responseData\n};"
        },
        "id": "12bb91ad-3f12-49ad-bc5f-5f1168b098a1",
        "name": "Course Completion",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          660,
          -120
        ]
      },
      {
        "parameters": {
          "jsCode": "// Welcome Message for Course Start\nconst sessionId = $json.sessionId;\nconst courseTopic = $json.courseTopic;\n\nconst responseData = {\n  sessionId,\n  toolType: 'welcome',\n  toolData: {\n    title: `Welcome to: ${courseTopic}`,\n    message: 'This adaptive course will guide you through 10 core concepts with personalized instruction based on your progress.',\n    instructions: 'Click Next to begin with the first concept.'\n  },\n  waitingForInput: false,\n  nextAction: 'start_course'\n};\n\nreturn {\n  ...($json),\n  responseData\n};"
        },
        "id": "c8c482e5-1068-4324-9fd7-dfbc727ef66b",
        "name": "Welcome Message",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          660,
          80
        ]
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ ['concept_card', 'insert_concept'].includes($json.nextAction) }}",
                      "rightValue": "concept_card",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "id": "tool1"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "conceptCard"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "assessment",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "tool2"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "assessment"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "prompt_exercise",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "tool3"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "promptExercise"
              }
            ]
          },
          "options": {}
        },
        "id": "105382c9-bcd2-45a1-a461-7418049985c9",
        "name": "Tool Router",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -880,
          655
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Concept Card Handler - UPDATED to remove smart reply logic\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerNote = $json.learnerInput?.note;\n\n// Update session state\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\nif (!session.currentConceptTools.includes('concept_card')) {\n  session.currentConceptTools.push('concept_card');\n}\nsession.lastToolUsed = 'concept_card';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'concept_card',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    title: concept.title,\n    summary: concept.summary,\n    expertTips: concept.expertTips,\n    canSubmitNote: true\n  },\n  waitingForInput: !learnerNote,\n  inputType: 'note',\n  message: 'Read through the concept and feel free to add any notes or questions.'\n};\n\n// Just return the response\nreturn {\n  ...($json),\n  responseData,\n  sessionId,\n  learnerProfile: $json.learnerProfile\n};"
        },
        "id": "e98c526a-8d16-4b63-87dc-fe6d3843cf4b",
        "name": "Concept Card Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          0,
          430
        ]
      },
      {
        "parameters": {
          "jsCode": "// Assessment Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerAnswer = $json.learnerInput?.answer;\nconst session = $json.sessionState;\n\n// Update session state\nif (!session.currentConceptTools.includes('assessment')) {\n  session.currentConceptTools.push('assessment');\n}\nsession.lastToolUsed = 'assessment';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'assessment',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    question: concept.assessmentQuestion,\n    conceptTitle: concept.title\n  },\n  waitingForInput: !learnerAnswer,\n  inputType: 'answer',\n  message: 'Answer the question to check your understanding.'\n};\n\n// If we have an answer, we need to grade it\nif (learnerAnswer) {\n  return {\n    ...($json),\n    needsGrading: true,\n    learnerAnswer,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsGrading: false,\n  responseData\n};"
        },
        "id": "20b424af-7d76-4d88-b9f6-baccecb434f1",
        "name": "Assessment Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          0,
          630
        ]
      },
      {
        "parameters": {
          "jsCode": "// Process Combined Grading and Knowledge Analysis\nconst result = JSON.parse($json.choices[0].message.content);\nconst responseData = $node[\"Assessment Handler\"].json.responseData;\nconst sessionId = $node[\"Assessment Handler\"].json.sessionId;\n\n// Get session directly from global\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Update assessment score\nsession.lastAssessmentScore = result.score;\n\n// Update knowledge state from the combined analysis\nif (result.knowledgeUpdate) {\n  session.knowledgeStrengths = result.knowledgeUpdate.updatedStrengths || [];\n  session.knowledgeGaps = result.knowledgeUpdate.updatedGaps || [];\n  \n  // Track knowledge evolution\n  if (!session.knowledgeEvolution) {\n    session.knowledgeEvolution = [];\n  }\n  \n  session.knowledgeEvolution.push({\n    timestamp: new Date().toISOString(),\n    concept: session.currentConcept.title,\n    conceptId: session.currentConcept.id,\n    isDynamic: session.currentConcept.isDynamic || false,\n    score: result.score,\n    strengths: result.knowledgeUpdate.updatedStrengths,\n    gaps: result.knowledgeUpdate.updatedGaps,\n    reasoning: result.knowledgeUpdate.reasoning\n  });\n}\n\n// UPDATE STATE MACHINE\nsession.stateMachine.previousState = session.stateMachine.currentState;\nsession.stateMachine.currentState = 'assessment_graded';\nsession.stateMachine.stateHistory.push({\n  from: 'assessment_submitted',\n  to: 'assessment_graded',\n  action: 'grading_complete',\n  timestamp: new Date().toISOString(),\n  orchestrator: 'core',\n  data: { score: result.score }\n});\nsession.stateMachine.pendingGrading = false;\n\n// Handle dynamic concept gap resolution\nif (session.currentConcept.isDynamic && result.score >= 3 && session.currentConcept.targetedGaps) {\n  session.knowledgeGaps = session.knowledgeGaps.filter(\n    gap => !session.currentConcept.targetedGaps.includes(gap)\n  );\n}\n\n// Track assessment history\nif (!session.assessmentHistory) {\n  session.assessmentHistory = [];\n}\n\nsession.assessmentHistory.push({\n  concept: session.currentConcept.title,\n  conceptId: session.currentConcept.id,\n  score: result.score,\n  timestamp: new Date().toISOString()\n});\n\n// Save updated state back to global\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Add grading to response\nresponseData.toolData.gradingResult = {\n  score: result.score,\n  feedback: result.feedback,\n  understood: result.understood\n};\nresponseData.waitingForInput = false;\nresponseData.nextAction = result.score >= 4 ? \n  'Excellent work! Click Next to continue.' : \n  result.score >= 3 ?\n  'Good understanding! Click Next to continue.' :\n  'Let\\'s reinforce this concept. Click Next to continue.';\n\n// IMPORTANT: Do NOT include sessionState in return\nreturn {\n  ...($node[\"Assessment Handler\"].json),\n  gradingResult: result,\n  responseData\n  // Remove: sessionState, knowledgeState\n};"
        },
        "id": "62e829fb-caf5-490d-89c6-d876fb53f4b4",
        "name": "Process Grading",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          0,
          230
        ]
      },
      {
        "parameters": {
          "jsCode": "// Prompt Exercise Handler\nconst concept = $json.currentConcept;\nconst sessionId = $json.sessionId;\nconst learnerPrompt = $json.learnerInput?.prompt;\nconst session = $json.sessionState;\n\n// Update session state\nif (!session.currentConceptTools.includes('prompt_exercise')) {\n  session.currentConceptTools.push('prompt_exercise');\n}\nsession.lastToolUsed = 'prompt_exercise';\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\nconst responseData = {\n  sessionId,\n  toolType: 'prompt_exercise',\n  conceptProgress: {\n    current: session.completedConcepts.length + 1,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    task: concept.promptTask,\n    conceptTitle: concept.title\n  },\n  waitingForInput: !learnerPrompt,\n  inputType: 'prompt',\n  message: 'Practice your prompt engineering skills with this task.'\n};\n\n// If we have a prompt, we need to evaluate it\nif (learnerPrompt) {\n  return {\n    ...($json),\n    needsEvaluation: true,\n    learnerPrompt,\n    responseData\n  };\n}\n\nreturn {\n  ...($json),\n  needsEvaluation: false,\n  responseData\n};"
        },
        "id": "994762b1-a884-4ca1-a8bc-5365dfd893de",
        "name": "Prompt Exercise Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -660,
          880
        ]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "={{ $json.needsEvaluation }}",
                "rightValue": "={{ true }}",
                "operator": {
                  "type": "boolean",
                  "operation": "true"
                },
                "id": "needeval"
              }
            ],
            "combinator": "and"
          },
          "options": {}
        },
        "id": "7ec0b707-324e-463d-aa26-a9d0ab0e3cc7",
        "name": "Need Evaluation?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2.1,
        "position": [
          -440,
          880
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "gpt-4o"
              },
              {
                "name": "messages",
                "value": "=[{\"role\": \"system\", \"content\": \"You are an expert at evaluating AI prompts for product management tasks. Return your evaluation as a JSON object.\"}, {\"role\": \"user\", \"content\": \"Task: {{ $json.currentConcept.promptTask }}\\nLearner's Prompt: {{ $json.learnerPrompt }}\\nLearner Background: {{ $json.learnerProfile.role }} with skills in {{ $json.learnerProfile.skills.join(', ') }}\\n\\nEvaluate the prompt and return a JSON object with this exact structure:\\n{\\n  \\\"score\\\": (0-5 number),\\n  \\\"feedback\\\": \\\"Constructive feedback\\\",\\n  \\\"strengths\\\": [\\\"what they did well\\\"],\\n  \\\"improvements\\\": [\\\"specific suggestions\\\"],\\n  \\\"simulatedAIResponse\\\": \\\"What an AI would generate from this prompt\\\"\\n}\"}]"
              },
              {
                "name": "temperature",
                "value": "0.7"
              },
              {
                "name": "max_tokens",
                "value": "300"
              },
              {
                "name": "response_format",
                "value": "={{ {\"type\": \"json_object\"} }}"
              }
            ]
          },
          "options": {}
        },
        "id": "589ebfbf-04ed-4418-aec3-b7d033649059",
        "name": "Evaluate Prompt",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -220,
          930
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process Prompt Evaluation\nconst evaluationResult = JSON.parse($json.choices[0].message.content);\nconst responseData = $node[\"Prompt Exercise Handler\"].json.responseData;\n\n// Add evaluation to response\nresponseData.toolData.evaluationResult = evaluationResult;\nresponseData.waitingForInput = false;\nresponseData.nextAction = 'Click Next to continue to the next concept.';\n\nreturn {\n  ...($node[\"Prompt Exercise Handler\"].json),\n  evaluationResult,\n  responseData\n};"
        },
        "id": "fb3a3510-9b2d-464b-aaf4-5a8645fbc535",
        "name": "Process Evaluation",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          0,
          930
        ]
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Insert New Concept and Set as Current\nconst newConcept = JSON.parse($json.choices[0].message.content);\n\n// Get the original data from the correct previous node\nconst originalData = $node[\"Generate New Concept Prompt\"].json.originalData;\nconst sessionId = originalData.sessionId;\nconst orchestratorDecision = originalData.orchestratorDecision;\n\n// Add metadata to new concept\nnewConcept.id = `dynamic_${Date.now()}`;\nnewConcept.isCore = false;\nnewConcept.isDynamic = true;\n\n// Get session from global directly\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Set targeted gaps from orchestrator decision\nconst targetGap = orchestratorDecision.conceptNeeded.reason || session.knowledgeGaps[0];\nnewConcept.targetedGaps = [targetGap];\nnewConcept.targetedGap = targetGap; // Keep both for compatibility\n\n// Increment the attempt counter for this gap\nif (targetGap) {\n  if (!session.gapAttempts) session.gapAttempts = {};\n  session.gapAttempts[targetGap] = (session.gapAttempts[targetGap] || 0) + 1;\n  newConcept.attemptNumber = session.gapAttempts[targetGap];\n}\n\n// IMPORTANT: Mark the struggling concept as completed so we don't return to it\nif (session.currentConcept && session.currentConcept.isCore) {\n  // Add the original concept to completed list\n  session.completedConcepts.push(session.currentConcept.id);\n  \n  // Remove it from remaining core concepts\n  session.remainingCoreConcepts = session.remainingCoreConcepts.filter(\n    id => id !== session.currentConcept.id\n  );\n}\n\n// Set the new concept as current\nsession.currentConcept = newConcept;\nsession.currentConceptTools = []; // Fresh start for the new concept\nsession.lastToolUsed = null;\n\n// Track the inserted dynamic concept\nsession.insertedConcepts.push(newConcept.id);\n\n// Clear previous assessment data since this is a new concept\nsession.lastAssessmentScore = null;\nsession.knowledgeGaps = []; // Clear the gaps\n\n// Save updated state back to global\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Return with the updated current concept - NO sessionState\nreturn {\n  ...originalData,\n  currentConcept: newConcept,\n  nextAction: 'concept_card',\n  newConceptInserted: true\n  // Remove: sessionState\n};"
        },
        "id": "e6225627-6936-447f-ba33-92ab36bbc005",
        "name": "Insert Concept",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -1100,
          405
        ]
      },
      {
        "parameters": {
          "jsCode": "// Complete Current Concept and Move to Next\nconst sessionId = $json.sessionId;\nconst currentConcept = $json.currentConcept;\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Mark current concept as completed\nif (currentConcept) {\n  session.completedConcepts.push(currentConcept.id);\n  \n  // Remove from remaining if it was a core concept\n  if (currentConcept.isCore) {\n    session.remainingCoreConcepts = session.remainingCoreConcepts.filter(\n      id => id !== currentConcept.id\n    );\n  }\n\n  // Remove from insertedConcepts if it was dynamic\n  if (currentConcept.isDynamic) {\n    session.insertedConcepts = session.insertedConcepts.filter(\n      id => id !== currentConcept.id\n    );\n  }\n}\n\n// Reset for next concept - THIS IS THE FIX\nsession.currentConcept = null;\nsession.currentConceptTools = []; // This should be empty!\nsession.lastToolUsed = null;\nsession.lastAssessmentScore = null; // Also clear this\nsession.knowledgeGaps = []; // And this\n\n// Save updated state\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Prepare response to move to next concept\nconst responseData = {\n  sessionId,\n  toolType: 'transition',\n  conceptProgress: {\n    current: session.completedConcepts.length,\n    total: session.remainingCoreConcepts.length + \n           session.completedConcepts.length + \n           session.insertedConcepts.length\n  },\n  toolData: {\n    completedConcept: currentConcept?.title,\n    message: 'Moving to next concept...'\n  },\n  waitingForInput: false,\n  nextAction: 'auto_continue'\n};\n\nreturn {\n  ...($json),\n  responseData,\n  moveToNext: true\n};"
        },
        "id": "cd7e4801-dcf5-42e4-b832-8979f3a95cd2",
        "name": "Complete Concept",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          0,
          1130
        ]
      },
      {
        "parameters": {
          "numberInputs": 3
        },
        "id": "96a252dc-c125-4964-92b4-e02a7094b939",
        "name": "Merge Responses",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3,
        "position": [
          880,
          80
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "fd65523c-3f4e-4dd5-93c2-c22496358174",
        "name": "Webhook Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.1,
        "position": [
          1320,
          80
        ]
      },
      {
        "parameters": {
          "path": "reset-session",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "96b78c16-369a-4eac-bbca-3047131bf1fd",
        "name": "Reset Session Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1.1,
        "position": [
          -3740,
          1390
        ],
        "webhookId": "594653ea-5a3e-4e99-9a1d-c2ecdf0f5c56"
      },
      {
        "parameters": {
          "jsCode": "// Reset Session\nconst sessionId = $json.query?.sessionId || 'default-session';\n\n// Clear session data\nconst sessionState = $getWorkflowStaticData('global');\nif (sessionState.sessions && sessionState.sessions[sessionId]) {\n  delete sessionState.sessions[sessionId];\n}\n\nreturn {\n  success: true,\n  message: `Session ${sessionId} has been reset`,\n  sessionId\n};"
        },
        "id": "797eefe9-48f7-4ac7-a647-a5787c8b0d53",
        "name": "Reset Session",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -3520,
          1390
        ]
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "b106a3c1-10ec-456d-aa88-dad4fa19ce91",
        "name": "Reset Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1.1,
        "position": [
          -3300,
          1390
        ]
      },
      {
        "parameters": {
          "jsCode": "// Extract webhook data from the first item in the array\nconst webhookData = $input.first().json.body;\n\n// Add course data\nreturn {\n  sessionId: webhookData.sessionId,\n  userName: webhookData.userName,\n  action: webhookData.action,\n  learnerInput: webhookData.learnerInput,\n  courseTopic: \"How to Become an AI Native Product Manager\",\n  learnerProfile: {\n    role: \"Product Manager\",\n    company: \"TechCorp\",\n    skills: [\"Agile\", \"User Research\", \"Basic Python\"]\n  },\n  coreConcepts: [\n    {\n      \"id\": 1,\n      \"title\": \"Understanding AI Capabilities\",\n      \"summary\": \"Learn what AI can and cannot do in product management\",\n      \"expertTips\": [\"Focus on problem-solving, not just technology\", \"Start with user needs\"],\n      \"assessmentQuestion\": \"What is the primary consideration when integrating AI into a product?\",\n      \"correctAnswer\": \"User value and problem-solution fit\",\n      \"promptTask\": \"Write a prompt to help identify user pain points for a fitness app\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 2,\n      \"title\": \"AI-First Product Strategy\",\n      \"summary\": \"Develop strategies that leverage AI as a core differentiator\",\n      \"expertTips\": [\"Think beyond automation\", \"Consider AI as a team member\"],\n      \"assessmentQuestion\": \"How does AI-first differ from AI-enabled products?\",\n      \"correctAnswer\": \"AI-first products have AI at their core value proposition, not just as an enhancement\",\n      \"promptTask\": \"Create a prompt to brainstorm AI-first features for an e-commerce platform\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 3,\n      \"title\": \"Prompt Engineering for PMs\",\n      \"summary\": \"Master the art of writing effective prompts for product tasks\",\n      \"expertTips\": [\"Be specific and contextual\", \"Iterate based on outputs\"],\n      \"assessmentQuestion\": \"What makes a product management prompt effective?\",\n      \"correctAnswer\": \"Clear context, specific goals, and measurable outcomes\",\n      \"promptTask\": \"Write a prompt to generate user stories for a new feature\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 4,\n      \"title\": \"AI Ethics in Product Design\",\n      \"summary\": \"Navigate ethical considerations when building AI products\",\n      \"expertTips\": [\"Consider bias in data and algorithms\", \"Prioritize transparency\"],\n      \"assessmentQuestion\": \"What is the most important ethical consideration for AI products?\",\n      \"correctAnswer\": \"Ensuring fairness and preventing harm to users\",\n      \"promptTask\": \"Draft a prompt to identify potential ethical issues in a healthcare AI product\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 5,\n      \"title\": \"Measuring AI Product Success\",\n      \"summary\": \"Define and track metrics for AI-powered features\",\n      \"expertTips\": [\"Balance accuracy with user satisfaction\", \"Track both technical and business metrics\"],\n      \"assessmentQuestion\": \"Beyond accuracy, what metric is crucial for AI products?\",\n      \"correctAnswer\": \"User trust and adoption rate\",\n      \"promptTask\": \"Create a prompt to generate a metrics dashboard for an AI feature\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 6,\n      \"title\": \"Cross-functional AI Collaboration\",\n      \"summary\": \"Work effectively with data scientists and ML engineers\",\n      \"expertTips\": [\"Learn the language of AI teams\", \"Focus on outcomes, not algorithms\"],\n      \"assessmentQuestion\": \"What's the PM's primary role in AI development?\",\n      \"correctAnswer\": \"Translating user needs into technical requirements and ensuring alignment\",\n      \"promptTask\": \"Write a prompt to create a collaboration plan between PM and AI teams\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 7,\n      \"title\": \"AI Product Roadmapping\",\n      \"summary\": \"Plan and prioritize AI features in your roadmap\",\n      \"expertTips\": [\"Account for uncertainty in AI development\", \"Build in experimentation time\"],\n      \"assessmentQuestion\": \"How does AI impact traditional roadmapping?\",\n      \"correctAnswer\": \"Requires more flexibility and iterative approaches due to uncertainty\",\n      \"promptTask\": \"Generate a prompt for creating an AI feature prioritization matrix\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 8,\n      \"title\": \"User Research for AI Products\",\n      \"summary\": \"Conduct research to understand AI product needs\",\n      \"expertTips\": [\"Test AI interactions early\", \"Understand user mental models of AI\"],\n      \"assessmentQuestion\": \"What's unique about user research for AI products?\",\n      \"correctAnswer\": \"Need to understand user expectations and trust in AI systems\",\n      \"promptTask\": \"Create a prompt for designing an AI product user interview guide\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 9,\n      \"title\": \"AI Product Launch Strategies\",\n      \"summary\": \"Successfully launch and iterate on AI features\",\n      \"expertTips\": [\"Start with beta users\", \"Communicate limitations clearly\"],\n      \"assessmentQuestion\": \"What's critical for AI product launches?\",\n      \"correctAnswer\": \"Setting proper expectations and having a feedback loop for improvements\",\n      \"promptTask\": \"Write a prompt to create an AI feature launch checklist\",\n      \"isCore\": true\n    },\n    {\n      \"id\": 10,\n      \"title\": \"Future of AI in Product Management\",\n      \"summary\": \"Prepare for emerging AI trends and technologies\",\n      \"expertTips\": [\"Stay curious about new AI capabilities\", \"Think about AI as augmentation\"],\n      \"assessmentQuestion\": \"How will AI change the PM role itself?\",\n      \"correctAnswer\": \"AI will augment PM capabilities, enabling data-driven decisions at scale\",\n      \"promptTask\": \"Generate a prompt to explore future AI use cases in your industry\",\n      \"isCore\": true\n    }\n  ]\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -3300,
          155
        ],
        "id": "e3e60765-ac9f-4eca-89f5-1345f9637886",
        "name": "Init Course Data"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Extract Response Data\nconst responseData = $json.responseData;\n\nif (!responseData) {\n  throw new Error('No responseData found in input');\n}\n\nreturn responseData;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1100,
          80
        ],
        "id": "6c95a2ab-4737-4e59-8cdb-601a6ff03f3d",
        "name": "Limit Data"
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -3740,
          55
        ],
        "id": "effd9526-5f2d-451b-9c65-d2833053562a",
        "name": "When clicking 'Test workflow'"
      },
      {
        "parameters": {
          "mode": "raw",
          "jsonOutput": "{\n  \"body\": {\n    \"sessionId\": \"manual_session\",\n    \"userName\": \"Mohammed Ali\",\n    \"action\": \"next\",\n    \"learnerInput\": {}\n  }\n}",
          "options": {}
        },
        "type": "n8n-nodes-base.set",
        "typeVersion": 3.4,
        "position": [
          -3520,
          55
        ],
        "id": "142a07db-b0f3-4226-a480-805447fc1890",
        "name": "Edit Fields"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "6131214d-57dc-4724-a4ee-daa86b8687ff",
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "=insert_concept",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "insertNewConcept"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c41e007c-c9f8-4e01-9c3b-f5416eaa4575",
                      "leftValue": "={{ $json.nextAction }}",
                      "rightValue": "=concept_complete",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "completeConcept"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ ['concept_card', 'assessment', 'prompt_exercise'].includes($json.nextAction) }}",
                      "rightValue": "={{ true }}",
                      "operator": {
                        "type": "boolean",
                        "operation": "true",
                        "singleValue": true
                      },
                      "id": "252d4b84-cc5a-482b-b966-c78ad46410f5"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "routeToTool"
              }
            ]
          },
          "options": {}
        },
        "id": "466ee47d-fefe-4842-9fe8-821b976ec12e",
        "name": "Check Next Action",
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -1760,
          855
        ]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "386b2aa4-f6b7-4304-aa88-cee4df29dfb7",
        "name": "Grade Assessment AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -220,
          230
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "const sessionId = $json.sessionId;\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\nif (!session) {\n  throw new Error(`Session ${sessionId} not found in global state`);\n}\n\nconst messages = [\n  {\n    role: \"system\",\n    content: \"You are an expert instructional coach who evaluates learner understanding AND tracks their evolving knowledge state. Analyze both the current answer and overall knowledge progression.\"\n  },\n  {\n    role: \"user\", \n    content: `Context:\n- Course Topic: ${$json.courseTopic}\n- Current Concept: ${session.currentConcept.title}\n- Question: ${session.currentConcept.assessmentQuestion}\n- Correct Answer: ${session.currentConcept.correctAnswer}\n- Learner's Answer: ${$json.learnerAnswer}\n- Learner Profile: ${$json.learnerProfile.role} at ${$json.learnerProfile.company}\n\nCurrent Knowledge State:\n- Strengths: ${session.knowledgeStrengths?.join(', ') || 'None tracked yet'}\n- Gaps: ${session.knowledgeGaps?.join(', ') || 'None tracked yet'}\n\nAssessment Context:\n- Is this a dynamic concept?: ${session.currentConcept.isDynamic || false}\n- Targeted gaps (if dynamic): ${session.currentConcept.targetedGaps?.join(', ') || 'N/A'}\n- Previous score: ${session.lastAssessmentScore || 'N/A'}\n\nEvaluate the answer AND update their knowledge state. Return JSON:\n{\n  \"score\": (0-5 number),\n  \"feedback\": \"Brief, encouraging feedback\",\n  \"understood\": (true or false),\n  \"knowledgeUpdate\": {\n    \"updatedStrengths\": [\"Complete list of what learner knows well\"],\n    \"updatedGaps\": [\"Complete list of significant gaps needing attention\"],\n    \"reasoning\": \"Brief explanation of knowledge state changes\"\n  }\n}\n\nGrading Rules:\n- 5: Perfect understanding\n- 4: Good understanding with minor gaps\n- 3: Adequate understanding for progression\n- 2: Significant gaps but some understanding\n- 0-1: Major misunderstanding\n\nKnowledge Rules:\n- Add strengths for demonstrated understanding (scores 3+)\n- Remove gaps that were successfully addressed\n- Only list actionable, specific gaps\n- For dynamic concepts addressing gaps, be generous if progress is shown\n- Empty gaps array means no significant issues`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.3,\n  max_tokens: 400,\n  response_format: { type: \"json_object\" },\n  // Pass through minimal data needed for processing\n  originalData: {\n    sessionId: $json.sessionId,\n    courseTopic: $json.courseTopic,\n    learnerAnswer: $json.learnerAnswer,\n    learnerProfile: $json.learnerProfile\n  }\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -440,
          230
        ],
        "id": "6e045226-b64a-4a6d-b917-58b19be3ee51",
        "name": "Grade Assessment Prompt"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Generate Concept Prompt - Prepares prompt for creating new adaptive concepts\nconst messages = [\n  {\n    role: \"system\",\n    content: \"Generate a new mini-concept to address a specific learning gap. The concept MUST directly target the identified gap, and the assessment question MUST verify the learner understands the gap area. Focus on building a bridge from their current understanding to the correct concept.\"\n  },\n  {\n    role: \"user\", \n    content: `Context:\n- Main Topic: ${$json.courseTopic}\n- Current Concept: ${$json.currentConcept.title}\n- Knowledge Gap: ${$json.orchestratorDecision.conceptNeeded.reason}\n- Specific Gap to Address: ${$json.sessionState.knowledgeGaps?.[0] || $json.orchestratorDecision.conceptNeeded.focus}\n- Learner Profile: ${$json.learnerProfile.role} at ${$json.learnerProfile.company}\n\nThe learner scored ${$json.sessionState.lastAssessmentScore}/5 and showed confusion about: \"${$json.sessionState.knowledgeGaps?.[0] || 'the core concept'}\"\n\nCreate a focused concept that DIRECTLY addresses this specific gap: \"${$json.orchestratorDecision.conceptNeeded.reason}\"\n\nThe assessment question MUST test whether the learner understands: ${$json.sessionState.knowledgeGaps?.[0] || $json.orchestratorDecision.conceptNeeded.focus}\n\nReturn JSON:\n{\n  \"title\": \"Clear, specific title\",\n  \"summary\": \"2-3 sentence overview\",\n  \"expertTips\": [\"2-3 practical tips\"],\n  \"assessmentQuestion\": \"Targeted question to verify understanding\",\n  \"correctAnswer\": \"Brief correct answer\",\n  \"promptTask\": \"Optional - only if relevant to the gap\"\n}`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.7,\n  max_tokens: 400,\n  response_format: { type: \"json_object\" },\n  // Pass through original data\n  originalData: $json\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -1540,
          405
        ],
        "id": "2d488480-b378-4fee-8fc6-a1c6d58e41dd",
        "name": "Generate New Concept Prompt"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "4efb9f86-d47d-49d0-830f-250ebf32531a",
        "name": "Generate New Concept AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -1320,
          405
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Combined Routing & Core Orchestrator - SIMPLIFIED\n// Handles both routing decisions AND simple deterministic transitions\n\nconst sessionId = $json.sessionId;\nconst action = $json.action;\nconst learnerInput = $json.learnerInput;\n\n// Read state directly from global\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\nif (!session) {\n  throw new Error(`Session ${sessionId} not found`);\n}\n\n// Get current state\nconst currentState = session.stateMachine.currentState;\nconst lastToolUsed = session.lastToolUsed;\nconst pendingGrading = session.stateMachine.pendingGrading;\nconst lastAssessmentScore = session.lastAssessmentScore;\nconst currentConcept = session.currentConcept;\n\n// Check if course is complete\nconst allConceptsCompleted = session.remainingCoreConcepts.length === 0;\nconst noPendingDynamicConcepts = session.insertedConcepts.every(\n  conceptId => session.completedConcepts.includes(conceptId)\n);\nconst courseComplete = !currentConcept && allConceptsCompleted && noPendingDynamicConcepts;\n\nconsole.log(`Routing: action=${action}, state=${currentState}`);\n\n// Initialize routing variables\nlet routeTo = null;\nlet updateState = null;\n\n// ROUTING LOGIC - Determine routing\nif (courseComplete) {\n  routeTo = 'show_completion';\n  updateState = 'course_complete';\n}\n// Start of course\nelse if (action === 'start' && currentState === 'uninitialized') {\n  routeTo = 'show_welcome';\n  updateState = 'welcome';\n}\n// Moving from welcome to first concept\nelse if (action === 'next' && currentState === 'welcome') {\n  // Get the first concept and set it as current\n  let nextConcept = null;\n  if (session.remainingCoreConcepts.length > 0) {\n    const nextId = session.remainingCoreConcepts[0];\n    nextConcept = $json.coreConcepts.find(c => c.id === nextId);\n  }\n  \n  if (nextConcept) {\n    session.currentConcept = nextConcept;\n    session.currentConceptTools = [];\n    // CHANGE: Route to Adaptive Orchestrator instead of directly to concept_card\n    routeTo = 'adaptive_orchestrator';\n    updateState = 'first_concept_ready';\n  }\n}\n// Assessment submission\nelse if (action === 'submit_response' && lastToolUsed === 'assessment' && learnerInput?.answer) {\n  // Record the interaction\n  session.interactionHistory.push({\n    concept: session.currentConcept?.title,\n    tool: 'assessment',\n    input: learnerInput,\n    timestamp: new Date().toISOString()\n  });\n  \n  // If there's a note, let Adaptive Orchestrator decide whether to grade\n  if (learnerInput?.note) {\n    session.assessmentPendingDecision = {\n      answer: learnerInput.answer,\n      note: learnerInput.note,\n      question: session.currentConcept?.assessmentQuestion\n    };\n    routeTo = 'adaptive_orchestrator';\n    updateState = 'assessment_with_note_pending';\n  } else {\n    // No note - proceed with normal grading\n    session.stateMachine.pendingGrading = true;\n    routeTo = 'grade_assessment';\n    updateState = 'assessment_submitted';\n  }\n}\n// Concept card note submission\nelse if (action === 'submit_response' && lastToolUsed === 'concept_card' && learnerInput?.note) {\n  // Record the interaction\n  session.interactionHistory.push({\n    concept: session.currentConcept?.title,\n    tool: 'concept_card',\n    input: learnerInput,\n    timestamp: new Date().toISOString()\n  });\n  \n  if (learnerInput.note) {\n    session.recentQuestions.push(learnerInput.note);\n    if (session.recentQuestions.length > 5) {\n      session.recentQuestions.shift();\n    }\n  }\n  \n  routeTo = 'adaptive_orchestrator';\n  updateState = 'concept_note_submitted';\n}\n// Post-grading decision needed\nelse if (pendingGrading && lastAssessmentScore !== null) {\n  routeTo = 'adaptive_orchestrator';\n}\n// General next action\nelse if (action === 'next' && currentConcept) {\n  routeTo = 'adaptive_orchestrator';\n}\n\n// Update state machine if needed\nif (updateState) {\n  session.stateMachine.previousState = currentState;\n  session.stateMachine.currentState = updateState;\n  session.stateMachine.stateHistory.push({\n    from: currentState,\n    to: updateState,\n    action: action,\n    timestamp: new Date().toISOString(),\n    orchestrator: 'core'\n  });\n}\n\n// Save back to global\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// SINGLE RETURN FORMAT\nreturn {\n  sessionId,\n  action,\n  learnerInput,\n  courseTopic: $json.courseTopic,\n  learnerProfile: $json.learnerProfile,\n  coreConcepts: $json.coreConcepts,\n  userName: $json.userName,\n  routeTo: routeTo,\n  courseComplete: courseComplete\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2860,
          155
        ],
        "id": "ad1ad3f2-6de6-4e89-a838-cf98ea0c983f",
        "name": "Core Orchestrator"
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "51295a96-00b1-497c-8a67-dd809c86da1b",
                      "leftValue": "{{ $json.routeTo }}",
                      "rightValue": "show_completion",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "courseComplete"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "leftValue": "={{ $json.routeTo }}",
                      "rightValue": "show_welcome",
                      "operator": {
                        "type": "string",
                        "operation": "equals"
                      },
                      "id": "8691f62e-4d5e-43ff-9a26-5d7b4c81ee13"
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "welcome"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "c07fc040-2d20-447e-b1df-286099b45a6a",
                      "leftValue": "={{ $json.routeTo }}",
                      "rightValue": "grade_assessment",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "gradeAssessment"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "7bcbe005-1204-42fd-9854-b542603af35b",
                      "leftValue": "{{ $json.routeTo }}",
                      "rightValue": "concept_card",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "conceptCard"
              },
              {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 2
                  },
                  "conditions": [
                    {
                      "id": "4b5e3875-e16a-4855-9817-960a1cce95ab",
                      "leftValue": "={{ $json.routeTo }}",
                      "rightValue": "adaptive_orchestrator",
                      "operator": {
                        "type": "string",
                        "operation": "equals",
                        "name": "filter.operator.equals"
                      }
                    }
                  ],
                  "combinator": "and"
                },
                "renameOutput": true,
                "outputKey": "toAdaptiveOrchestrator"
              }
            ]
          },
          "options": {
            "fallbackOutput": "extra",
            "renameFallbackOutput": "adaptive_orchestrator"
          }
        },
        "type": "n8n-nodes-base.switch",
        "typeVersion": 3.2,
        "position": [
          -2640,
          120
        ],
        "id": "a8f5c0f1-b534-45ea-b001-5cc3ebc1c6b8",
        "name": "Core Router"
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Adaptive Orchestrator Router Prompt - WITH LEARNER NOTE SUPPORT\n// Get session directly from global\nconst sessionId = $json.sessionId;\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\nif (!session) {\n  throw new Error(`Session ${sessionId} not found in global state`);\n}\n\nconst messages = [\n  {\n    role: \"system\",\n    content: \"You are an adaptive learning orchestrator. Analyze the current learning state and decide the next best action for the learner. When learner notes are provided, carefully analyze them to determine if the learner needs clarification, is ready to progress, or would benefit from additional content.\"\n  },\n  {\n    role: \"user\", \n    content: `Current State Machine:\n- Current State: ${session.stateMachine.currentState}\n- Previous State: ${session.stateMachine.previousState || 'None'}\n- Pending Grading: ${session.stateMachine.pendingGrading}\n${session.stateMachine.currentState === 'first_concept_ready' ? '- Note: This is the first concept after welcome' : ''}\n\nCurrent Learning State:\n- Course Topic: ${$json.courseTopic}\n- Current Concept: ${session.currentConcept?.title || 'None'}\n- Tools Already Used: ${session.currentConceptTools.join(', ') || 'None'}\n- Last Assessment Score: ${session.lastAssessmentScore || 'N/A'}/5\n- Knowledge Gaps: ${session.knowledgeGaps?.join(', ') || 'None'}\n- Gap Attempts: ${JSON.stringify(session.gapAttempts || {})}\n- Recent Questions: ${session.recentQuestions?.join('; ') || 'None'}\n- Completed Concepts: ${session.completedConcepts.length}\n- Remaining Core Concepts: ${session.remainingCoreConcepts.length}\n\n${$json.learnerInput?.note ? `\nIMPORTANT - LEARNER NOTE ANALYSIS REQUIRED:\nThe learner just submitted this note/question with their input:\n\"${$json.learnerInput.note}\"\n\nCurrent Concept Being Studied: ${session.currentConcept?.title}\nConcept Summary: ${session.currentConcept?.summary || 'N/A'}\n\nAnalyze this note carefully to determine:\n1. Is the learner confused or asking for clarification? \n   - Look for: question marks, words like \"confused\", \"don't understand\", \"unclear\", \"help\"\n   - If yes → strongly consider insert_concept to address the confusion\n\n2. Is the learner showing understanding and ready to move on?\n   - Look for: \"I get it\", \"makes sense\", \"understood\", \"ready\"\n   - If yes → proceed to assessment\n\n3. Is the learner making connections or showing deeper thinking?\n   - Look for: relating to their role/experience, asking advanced questions, making analogies\n   - If yes AND prior assessment scores are high → consider prompt_exercise\n\n4. Does the note reveal specific knowledge gaps?\n   - Look for: misconceptions, incorrect assumptions, missing foundational knowledge\n   - If yes → insert_concept with specific focus on the gap\n\n5. Is the learner asking for examples or application to their role?\n   - Look for: \"example\", \"how does this apply\", \"in practice\", \"for ${$json.learnerProfile?.role}\"\n   - If yes → insert_concept with practical examples\n` : ''}\n\nDecision Rules:\n1. Always start new concepts with concept_card (including when state is 'first_concept_ready')\n2. Follow concept_card with assessment UNLESS learner note indicates confusion or requests clarification\n3. If learner note shows confusion, questions, or requests for examples → strongly prefer insert_concept\n4. Only use prompt_exercise if assessment score >= 4 AND a prompt task exists\n5. If assessment score < 3 or significant gaps exist → use insert_concept INSTEAD of continuing\n6. Use concept_complete when all tools for current concept are done AND no confusion remains\n7. When state is 'first_concept_ready', default to concept_card unless there's a specific reason not to\n\n${$json.learnerInput?.note ? 'IMPORTANT: The learner note should heavily influence your decision. Prioritize addressing their specific question or concern.' : ''}\n\nReturn JSON:\n{\n  \"nextAction\": \"concept_card|assessment|prompt_exercise|concept_complete|insert_concept\",\n  \"reasoning\": \"Brief explanation of decision${$json.learnerInput?.note ? ', including specific analysis of the learner note' : ''}\",\n  \"conceptNeeded\": {\n    \"reason\": \"specific gap to address if action is insert_concept (quote relevant part of learner note if applicable)\",\n    \"focus\": \"topic area for new concept if inserting\"\n  }${$json.learnerInput?.note ? ',\\n  \"noteAnalysis\": {\\n    \"understanding\": \"low|medium|high\",\\n    \"needsClarification\": true|false,\\n    \"specificRequest\": \"what they are asking for if clear\",\\n    \"sentiment\": \"confused|curious|confident|frustrated\"\\n  }' : ''}\n}`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.3,\n  max_tokens: 300,\n  response_format: { type: \"json_object\" },\n  // Pass through original data WITHOUT sessionState\n  originalData: {\n    sessionId: $json.sessionId,\n    action: $json.action,\n    learnerInput: $json.learnerInput,\n    courseTopic: $json.courseTopic,\n    learnerProfile: $json.learnerProfile,\n    coreConcepts: $json.coreConcepts,\n    userName: $json.userName,\n    currentConcept: session.currentConcept, // Include current concept for reference\n    stateMachine: {\n      currentState: session.stateMachine.currentState // Only pass minimal state info\n    }\n  }\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -2420,
          855
        ],
        "id": "06db88ce-a959-484a-b3ae-40106cef6daa",
        "name": "Adaptive Orchestrator Router Prompt"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "5c507846-adac-4cb6-b280-69e318f94781",
        "name": "Adaptive Orchestrator AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          -2200,
          855
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "mode": "runOnceForEachItem",
          "jsCode": "// Process Orchestrator Decision\nconst orchestratorDecision = JSON.parse($json.choices[0].message.content);\nconst originalData = $node[\"Adaptive Orchestrator Router Prompt\"].json.originalData;\nconst sessionId = originalData.sessionId;\n\n// Get session directly from global\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Initialize gap tracking if needed\nif (!session.gapAttempts) session.gapAttempts = {};\nif (!session.deferredGaps) session.deferredGaps = [];\n\n// Check if we're trying to insert a concept for a gap we've already attempted multiple times\nif (orchestratorDecision.nextAction === 'insert_concept' && session.knowledgeGaps.length > 0) {\n  // Find which gap this would address\n  const targetGap = session.knowledgeGaps[0];\n  const attempts = session.gapAttempts[targetGap] || 0;\n  \n  if (attempts >= 2) {\n    // Override the orchestrator's decision\n    orchestratorDecision.nextAction = 'concept_complete';\n    orchestratorDecision.reasoning = `Gap \"${targetGap}\" has been attempted ${attempts} times. Moving forward with core curriculum.`;\n    \n    // Move gap to deferred list\n    session.knowledgeGaps = session.knowledgeGaps.filter(gap => gap !== targetGap);\n    session.deferredGaps.push({\n      gap: targetGap,\n      attempts: attempts,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Clean up attempts counter\n    delete session.gapAttempts[targetGap];\n  }\n}\n\n// After processing the orchestrator decision, add validation:\n// If we're at the first concept and orchestrator suggests something other than concept_card\nif (originalData.stateMachine?.currentState === 'first_concept_ready' && \n    orchestratorDecision.nextAction !== 'concept_card' &&\n    !originalData.learnerInput?.note) {\n  // Override to ensure we start with concept_card\n  orchestratorDecision.nextAction = 'concept_card';\n  orchestratorDecision.reasoning = 'Starting first concept with concept card as required';\n}\n\n// Save updated session state back to global\n$getWorkflowStaticData('global').sessions[sessionId] = session;\n\n// Return WITHOUT sessionState\nreturn {\n  ...originalData,\n  orchestratorDecision,\n  nextAction: orchestratorDecision.nextAction\n  // Remove: sessionState\n};"
        },
        "id": "924dc5db-eb65-4570-9d4b-74c21f2d94a7",
        "name": "Process Adaptive Orchestrator Decision",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -1980,
          855
        ]
      },
      {
        "parameters": {
          "jsCode": "// Smart Reply Generator Prompt - Prepares LLM request for smart replies\nconst toolType = $json.responseData.toolType;\nconst toolData = $json.responseData.toolData;\nconst sessionId = $json.sessionId;\n\n// Get session for context\nconst session = $getWorkflowStaticData('global').sessions[sessionId];\n\n// Skip if not a learning tool\nif (!toolType || toolType === 'transition' || toolType === 'course_complete' || toolType === 'welcome') {\n  return {\n    ...$json,\n    skipSmartReplies: true\n  };\n}\n\n// Build context for smart reply generation\nlet contextPrompt = '';\n\nswitch(toolType) {\n  case 'concept_card':\n    contextPrompt = `Tool: Concept Card\nCurrent Concept: ${toolData.title}\nSummary: ${toolData.summary}\nLearner Role: ${$json.learnerProfile?.role || 'Product Manager'}\nLearner just finished reading this concept.\n\nGenerate 5 smart reply options that a learner might want to click. Include:\n- A request for real-world examples\n- A question about role application\n- Confirmation of understanding\n- Expression of confusion\n- Request for deeper exploration`;\n    break;\n    \n  case 'assessment':\n    const score = toolData.gradingResult?.score || 0;\n    contextPrompt = `Tool: Assessment\nQuestion: ${toolData.question}\nLearner Score: ${score}/5\nFeedback Given: ${toolData.gradingResult?.feedback || 'Not graded yet'}\nLearner Role: ${$json.learnerProfile?.role || 'Product Manager'}\n\nGenerate 4 contextual smart reply options based on their score:\n${score >= 4 ? 'High score - focus on advancement and deeper learning' : \n  score >= 2 ? 'Medium score - focus on clarification and improvement' : \n  'Low score - focus on help and review'}`;\n    break;\n    \n  case 'prompt_exercise':\n    const promptScore = toolData.evaluationResult?.score || 0;\n    contextPrompt = `Tool: Prompt Exercise\nTask: ${toolData.task}\nEvaluation Score: ${promptScore}/5\nFeedback: ${toolData.evaluationResult?.feedback || 'Not evaluated yet'}\nLearner Role: ${$json.learnerProfile?.role || 'Product Manager'}\n\nGenerate 5 smart reply options for someone who just completed a prompt exercise. Include options for:\n- Seeing better examples\n- Improvement guidance\n- Trying again\n- Expressing satisfaction/frustration\n- Moving forward`;\n    break;\n}\n\nconst messages = [\n  {\n    role: \"system\",\n    content: \"You are an adaptive learning assistant generating smart reply options for learners. Create short, natural responses that a learner might click instead of typing. Each reply should be under 10 words and feel conversational.\"\n  },\n  {\n    role: \"user\",\n    content: `${contextPrompt}\n\nAdditional Context:\n- Knowledge Gaps: ${session.knowledgeGaps?.join(', ') || 'None identified'}\n- Recent Questions: ${session.recentQuestions?.slice(-2).join('; ') || 'None'}\n- Learning Progress: ${session.completedConcepts.length} concepts completed\n\nReturn a JSON array of smart reply strings that are:\n1. Contextually relevant to the current tool and score\n2. Natural and conversational\n3. Actionable and specific\n4. Varied in intent (questions, confirmations, requests)\n\nExample format: [\"Reply 1\", \"Reply 2\", \"Reply 3\", \"Reply 4\", \"Reply 5\"]`\n  }\n];\n\nreturn {\n  messages,\n  model: \"gpt-4o\",\n  temperature: 0.7,\n  max_tokens: 200,\n  response_format: { type: \"json_object\" },\n  // Pass through original data\n  originalData: $json\n};"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          220,
          705
        ],
        "id": "be64665b-45fb-4adb-8b1e-2cb107856920",
        "name": "Smart Reply Generator Prompt"
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://api.openai.com/v1/chat/completions",
          "authentication": "predefinedCredentialType",
          "nodeCredentialType": "openAiApi",
          "sendBody": true,
          "bodyParameters": {
            "parameters": [
              {
                "name": "model",
                "value": "={{ $json.model }}"
              },
              {
                "name": "messages",
                "value": "={{ $json.messages }}"
              },
              {
                "name": "temperature",
                "value": "={{ $json.temperature }}"
              },
              {
                "name": "max_tokens",
                "value": "={{ $json.max_tokens }}"
              },
              {
                "name": "response_format",
                "value": "={{ $json.response_format }}"
              }
            ]
          },
          "options": {}
        },
        "id": "7bb05606-4375-4a87-a154-53c40f59b087",
        "name": "Smart Reply Generator AI Call",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.2,
        "position": [
          440,
          705
        ],
        "credentials": {
          "openAiApi": {
            "id": "UFaW72U0IV5U0Ec5",
            "name": "OpenAi account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process Smart Replies - Add generated replies to response\nconst smartReplies = JSON.parse($json.choices[0].message.content);\nconst originalData = $node[\"Smart Reply Generator Prompt\"].json.originalData;\n\n// Add smart replies to the response\nconst enhancedResponse = {\n  ...originalData,\n  responseData: {\n    ...originalData.responseData,\n    toolData: {\n      ...originalData.responseData.toolData,\n      smartReplies: Array.isArray(smartReplies) ? smartReplies : Object.values(smartReplies)\n    }\n  }\n};\n\nreturn enhancedResponse;"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          660,
          705
        ],
        "id": "8f8042ce-a78a-4728-9bd9-f3a12ba8c4f9",
        "name": "Process Smart Replies"
      }
    ],
    "pinData": {},
    "connections": {
      "Main Webhook": {
        "main": [
          [
            {
              "node": "Init Course Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Session State Manager": {
        "main": [
          [
            {
              "node": "Core Orchestrator",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Tool Router": {
        "main": [
          [
            {
              "node": "Concept Card Handler",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Assessment Handler",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Prompt Exercise Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Concept Card Handler": {
        "main": [
          [
            {
              "node": "Smart Reply Generator Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Assessment Handler": {
        "main": [
          [
            {
              "node": "Smart Reply Generator Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Grading": {
        "main": [
          [
            {
              "node": "Smart Reply Generator Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prompt Exercise Handler": {
        "main": [
          [
            {
              "node": "Need Evaluation?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Need Evaluation?": {
        "main": [
          [
            {
              "node": "Evaluate Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Smart Reply Generator Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Evaluate Prompt": {
        "main": [
          [
            {
              "node": "Process Evaluation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Evaluation": {
        "main": [
          [
            {
              "node": "Smart Reply Generator Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Insert Concept": {
        "main": [
          [
            {
              "node": "Tool Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Complete Concept": {
        "main": [
          [
            {
              "node": "Smart Reply Generator Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Course Completion": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Welcome Message": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge Responses": {
        "main": [
          [
            {
              "node": "Limit Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reset Session Webhook": {
        "main": [
          [
            {
              "node": "Reset Session",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Reset Session": {
        "main": [
          [
            {
              "node": "Reset Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Init Course Data": {
        "main": [
          [
            {
              "node": "Session State Manager",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Limit Data": {
        "main": [
          [
            {
              "node": "Webhook Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "When clicking 'Test workflow'": {
        "main": [
          [
            {
              "node": "Edit Fields",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Edit Fields": {
        "main": [
          [
            {
              "node": "Init Course Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Next Action": {
        "main": [
          [
            {
              "node": "Generate New Concept Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Complete Concept",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Tool Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Grade Assessment Prompt": {
        "main": [
          [
            {
              "node": "Grade Assessment AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Grade Assessment AI Call": {
        "main": [
          [
            {
              "node": "Process Grading",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate New Concept Prompt": {
        "main": [
          [
            {
              "node": "Generate New Concept AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Generate New Concept AI Call": {
        "main": [
          [
            {
              "node": "Insert Concept",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Core Orchestrator": {
        "main": [
          [
            {
              "node": "Core Router",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Core Router": {
        "main": [
          [
            {
              "node": "Course Completion",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Welcome Message",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Grade Assessment Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Concept Card Handler",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Adaptive Orchestrator Router Prompt",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Adaptive Orchestrator Router Prompt",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adaptive Orchestrator Router Prompt": {
        "main": [
          [
            {
              "node": "Adaptive Orchestrator AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Adaptive Orchestrator AI Call": {
        "main": [
          [
            {
              "node": "Process Adaptive Orchestrator Decision",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Adaptive Orchestrator Decision": {
        "main": [
          [
            {
              "node": "Check Next Action",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Smart Reply Generator Prompt": {
        "main": [
          [
            {
              "node": "Smart Reply Generator AI Call",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Smart Reply Generator AI Call": {
        "main": [
          [
            {
              "node": "Process Smart Replies",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process Smart Replies": {
        "main": [
          [
            {
              "node": "Merge Responses",
              "type": "main",
              "index": 2
            }
          ]
        ]
      }
    },
    "active": true,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "8bb3fea0-cc8f-4042-a2bf-90add15fc8f3",
    "meta": {
      "instanceId": "eea8bfa4918320bc469ce323a7b217b8209b639e450c67bc3e6a88bdf340b7de"
    },
    "id": "KAufRbE2JWWbkbMk",
    "tags": []
  }